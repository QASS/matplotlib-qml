{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This project is about creating an easy to use interface to use matplotlib plots inside QML with the QML-like syntax.</p> <p>This is an example for a dashboard build with the matplotlib bridge, PySide2 and QML:</p> <p></p> <p>This is the result of the following code:</p> <pre><code>ColumnLayout {\n    anchors.fill: parent\n    Figure {\n        id: figure\n        objectName: \"figure\"\n        Layout.fillWidth: true\n        Layout.fillHeight: true\n        Component.onCompleted: init()\n        faceColor: \"#293133\"\n        Plot {\n            objectName: \"plot\"\n            faceColor: \"#293133\"\n            Axes {\n                id: ax\n                objectName: \"axis\"\n                grid: true\n                gridAlpha: 0.7\n                xAxisLabel: \"X-Axis\"\n                yAxisLabel: \"Y-Axis\"\n                xAxisTickColor: \"white\"\n                xAxisLabelColor: \"white\"\n                yAxisTickColor: \"white\"\n                yAxisLabelColor: \"white\"\n\n                Line {\n                    id: line\n                    linewidth: 4\n                    xData: [1, 2, 3, 4, 5, 6]\n                    yData: [1, 2, 3, 1, 4, 4]\n                }\n                HLine {\n                    linewidth: 4\n                    linestyle: \"dashed\"\n                    color: \"white\"\n                    y: 2.5\n                }\n            }\n        }\n    }\n    RowLayout {\n        Figure {\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Component.onCompleted: init()\n            faceColor: \"#293133\"\n            Plot {\n                objectName: \"plot\"\n                faceColor: \"#293133\"\n                Axes {\n                    objectName: \"axis\"\n                    grid: false\n                    gridAlpha: 0.7\n                    xAxisLabel: \"X-Axis\"\n                    yAxisLabel: \"Y-Axis\"\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n\n                    Imshow {\n                    x: [[1,2,3], [2,3,4]]\n                    cMap: \"gist_rainbow\"\n                    aspect: \"auto\"\n                    extent: [0, 3, 0, 4]\n                    colorbar: Colorbar {\n                        tickColor: \"white\"\n                        tickLabelColor: \"white\"\n                        }                       \n                    }   \n                }\n            }\n        }\n        Figure {\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Component.onCompleted: init()\n            faceColor: \"#293133\"\n            Plot {\n                objectName: \"plot\"\n                faceColor: \"#293133\"\n                Axes {\n                    objectName: \"axis\"\n                    grid: true\n                    gridAlpha: 0.7\n                    xAxisLabel: \"X-Axis\"\n                    yAxisLabel: \"Y-Axis\"\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n\n                    FillBetween {\n                        id: fb\n                        x: [1,2,3,4,5]\n                        y1: [2,3,2,5,6]\n                        y2: [4,5,6.5,6,8]\n                        linewidth: 1\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":"<p>The matplotlib bindings use components that are registered as QML-Objects that can then be used as templates.</p> <p>All components wrap a matplotlib Artist object. It's possible to modify the artist directly by reaching through the wrapper object to get the original matplotlib object. This is not recommended because the wrapper objects keeps the state due to how the initialization in QML works and applies it on the wrapped <code>Artist</code>.</p> <p>The documentation page of a component contains a Properties header. This is to be read as follows:</p>"},{"location":"architecture/#structure-of-this-documentation","title":"Structure of this documentation","text":"<p>The documentation lists the functionality of a plugin component and also the component that it inherits from. The inheritance structure is very similar to the one from matplotlib.</p>"},{"location":"architecture/#property-name-property-type","title":"property-name (property-type)","text":"<p>(This is the name of the property in QML)</p> <p>(short description about what it does)</p> <p>Python Methods (A table about the corresponding Python interface. Using these methods is the same as reading or writing to a QML property)</p>"},{"location":"architecture/#numpy-values","title":"Numpy values","text":"<p>Numpy objects or data-types aren't supported by QML resulting in unexpected behaviour when the property is read in QML (no errors). because of that all numpy types are converted into native python data types before the getter returns them.</p>"},{"location":"contribution/","title":"Contribution Guide","text":"<p>You want to contribute to the project? That's great stuff! Currently I'm checking how tests could be integrated into gitlab to allow the CI/CD workflow we'd all love to have. But until then this will be compensated by code-reviews. </p>"},{"location":"contribution/#workflow","title":"Workflow","text":"<p>The project uses a plugin architecture. The aim is to create separateable components that are independent of each other. Contributing with one of those is the easiest since they are standalone and can be even plugged in and out during runtime.  The core structure is based on an inheritance tree of classes that mimic the structure of the matplotlib inheritance. If you want to write a plugin you should check out which class already implements some properties and inherit from it. Normally this should be the <code>Artist</code> or some other class that already inherits from <code>Artist</code>. If your class can't implement the properties of <code>Artist</code> you need to inherit from <code>Base</code>. These are the two superclasses that are recognized by the figure and included in the initialization flow.</p> <pre><code>from matplotlib_qml.plot_objects import Base\nfrom matplotlib_qml.artist import Artist\n</code></pre> <p>If you don't do that your component will be usable in QML (i.e. no error appears) but it won't be called by the <code>Figure</code> wrapper object and thus not initialize. If you 'just' want to write a plugin for yourself you can go to Write a Plugin.</p> <p>If you want to write a plugin to integrate it into the project create a branch named <code>plugin/&lt;name_of_your_plugin&gt;</code> and create a merge request for me. Of course while the request is pending you can already use it as described above.</p>"},{"location":"contribution/#documentation","title":"Documentation","text":"<p>Whenever you want to contribute make sure your plugin/feature comes with sufficient documentation. The documentation is a Gitlab Wiki page and must include the following and obey the structure of the component pages: - Docstrings under non-property methods (if they have a complicated data flow) in the Sphinx format - At least one Example that can be copy pasted - Description of the QML properties - Description of the Python interface for the QML properties</p> <p>This is to ensure that your code can be properly reviewed, debugged, tested and extended later on.</p>"},{"location":"event_system/","title":"Event system","text":"<p>The Matplotlib-QML Interfaces uses an <code>EventHandler</code> class which is always created with the <code>Figure</code>. This <code>EventHandler</code> is handed down to each children (The property naming is <code>self._event_handler</code>). Events are defined as string constants living inside of the <code>EventTypes</code> class. The event system is meant to provide a flexible way to execute functions after certain actions and group changes in the plot together to reduce overhead when rerendering. If the Figure needs to redraw too often it starts to flicker. You can schedule an event like this: <pre><code>self._event_handler.schedule(EventTypes.PLOT_DATA_CHANGED)\n</code></pre> or you can directly emit an event: <pre><code>self._event_handler.emit(EventTypes.PLOT_DATA_CHANGED)\n</code></pre> Note that you create a lot of overhead if you emit events directly too often. The cycle length of each timer can be adjusted in the <code>Figure</code> Propertys <code>shortTimerInterval</code> and <code>longTimerInterval</code>. They will default to <code>shortTimerInterval = 20</code> and <code>longTimerInterval = 100</code> (values in ms) if not provided.</p>"},{"location":"installation/","title":"Matplotlib QML","text":"<p>This project is about creating an easy to use interface to use matplotlib plots inside QML with the QML-like syntax. </p>"},{"location":"installation/#compatibility","title":"Compatibility","text":"<p>Since the aim of the project is the integration in our software the wrapper is developed with the following package versions:</p> <ul> <li>matplotlib 3.3.3</li> <li>matplotlib_backend_pyside2 0.0.9 (Download)</li> <li>numpy 1.19.5</li> <li>PySide2 </li> </ul>"},{"location":"installation/#installation-guide","title":"Installation guide","text":"<p>Since this package is just another python package you can install it in any of your host systems.</p>"},{"location":"installation/#optimizer4d","title":"Optimizer4D","text":"<p>Get the package by downloading the <code>.whl</code>-file  from the Packages &amp; Registries Tab in this repository. Install the package on the system: <pre><code>pip install --user --no-dependencies &lt;path/to/wheel&gt;\n</code></pre> It's important to include the flag <code>--no-dependencies</code>. Otherwise pip will install the dependencies over the existing installations and break the Analyzer4D software. If that happens by mistake you can uninstall them with <code>pip uninstall &lt;pacakge&gt;</code> and the software should work fine again (given you used the <code>--user</code> flag.</p> <p>To use the matplotlib_qml inside the QML files you need to initialize it during the startup phase of the Analyzer4D. To achieve that you need to create a <code>.py</code> file and provide the path in the <code>Configuration/Preferences/Python</code> tab of the Analyzer4D software to the <code>python_init_hook</code> field (restart the program afterwards).  That python file needs to include the following lines: <pre><code>import matplotlib_qml\n\nmatplotlib_qml.init()\n</code></pre></p>"},{"location":"installation/#windows","title":"Windows","text":"<p>It's always advisable to create a python-virutal-environment beforehand. <pre><code>py -m venv &lt;name_of_venv&gt;\n</code></pre> Then activate the venv.</p> <pre><code>venv/Scripts/activate\n</code></pre> <p>Download the latest wheel (Download Mirror will be provided soon<sup>TM</sup>). It should look like <code>matplotlib_qml-&lt;version&gt;...</code>. Install the wheel in your environment (sometimes you have to explicitly say <code>pip3</code> for Python 3.*): <pre><code>pip install &lt;path/to/wheel&gt;\n</code></pre></p>"},{"location":"installation/#maclinux","title":"Mac/Linux","text":"<p>It's always advisable to create a python-virutal-environment beforehand. <pre><code>python3 -m venv &lt;name_of_venv&gt;\n</code></pre> Then activate the venv.</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Download the latest wheel (Download Mirror will be provided soon<sup>TM</sup>). It should look like <code>matplotlib_qml-&lt;version&gt;...</code>. Install the wheel in your environment (sometimes you have to explicitly say <code>pip3</code> for Python 3.*): <pre><code>pip3 install &lt;path/to/wheel&gt;\n</code></pre></p> <p>This should also install the required dependencies <code>matplotlib_backend_pyside2</code>, <code>matplotlib</code>, <code>PySide2</code> and <code>numpy</code>.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>If you want to include the bindings in your project to use matplotlib in qml you only need to add these two lines before you initialize your application:</p> <pre><code>import matplotlib_qml\n\nmatplotlib_qml.init()\n</code></pre>"},{"location":"quickstart/#example-application","title":"Example application","text":"<p>Create a minimal example for creating a <code>QGuiApplication</code> using QML:</p> <p>In your project directory create two files <code>main.py</code> and <code>main.qml</code>. main.py: <pre><code>import sys\nfrom PySide2.QtGui import QGuiApplication\nfrom PySide2.QtQml import QQmlApplicationEngine\nfrom PySide2.QtCore import QUrl\n\nimport matplotlib_qml\nfrom pathlib import Path\n\n\ndef main():\n    app = QGuiApplication(sys.argv)\n    engine = QQmlApplicationEngine()\n\n    matplotlib_qml.init()\n\n    qml_file = Path(__file__).parent / \"main.qml\"\n    engine.load(QUrl.fromLocalFile(str(qml_file.resolve())))\n\n    if not engine.rootObjects():\n        sys.exit(-1)\n\n    sys.exit(app.exec_())\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p> <p>main.qml: <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    stack.itemAt(tabbar.currentIndex).home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    stack.itemAt(tabbar.currentIndex).back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    stack.itemAt(tabbar.currentIndex).forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    stack.itemAt(tabbar.currentIndex).pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    stack.itemAt(tabbar.currentIndex).zoom()\n                }\n            }\n            Text {\n                text: \"(\" + stack.itemAt(tabbar.currentIndex).coordinates[0].toString() + \", \" + stack.itemAt(tabbar.currentIndex).coordinates[1].toString() + \")\"\n            }           \n        }\n\n    TabBar {\n        id: tabbar\n        TabButton {\n            text: \"1\"\n            width: 100\n        }\n        TabButton {\n            text: \"2\"\n            width: 100\n        }\n    }\n    StackLayout {\n        id: stack\n        currentIndex: tabbar.currentIndex\n        Figure {\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Component.onCompleted: init()\n            coordinatesRefreshRate: 1000\n            Plot {\n                Axis {\n                    Line {\n                        xData: [10,20,30]\n                        yData: [10,20,30]\n                    }\n                }\n            }\n        }\n        Figure {\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Component.onCompleted: init()\n            coordinatesRefreshRate: 1000\n            Plot {\n                Axis {\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n                    ScatterCollection {\n                        id: collection\n                        x: [1,2,3,4,5,6,7,8,9]\n                        y: [1,2,3,4,5,6,7,8,9]\n                        c: [1,2,3,4,5,6,7,8,9]\n                        cMap: \"gist_rainbow\"\n                        vMin: 0\n                        vMax: 10\n                        colorbar: Colorbar {\n                            orientation: \"horizontal\"\n                            location: \"bottom\"\n                            }\n                        }\n                    }\n                }\n            }\n        }   \n    }\n}\n</code></pre></p> <p>Now execute the <code>main.py</code> file: <pre><code>py main.py\n</code></pre></p>"},{"location":"read_the_docs/","title":"How to read this documentation","text":"<p>This documentation is structured around the available components and their hierarchy. A <code>Figure</code> wraps a <code>Plot</code> which wraps an <code>Axes</code> which  then contains <code>Artist</code> objects.</p> <p>The package follows a plugin architecture that still relies on a python inheritance tree. This tree is very heavily inspired by the matplotlib inheritance tree to the point where you can look it up for a full picture.</p> <p>The base classes like <code>Artist</code> or <code>Polygon</code> aim to provide the same functionality as their matplotlib counterparts. This makes adding more matplotlib types easier since this base structure is already available. It also prevents having to implement the same functionality multiple times.</p> <p>The Base Classes are not meant to be instantiated and are not available in QML. The Components are available through import <code>Matplotlib 1.0</code> in QML and you can use every property that is listed on the component and</p>"},{"location":"write_plugin/","title":"Write a plugin","text":"<p>On application start the <code>plugin_loader</code> will attempt to load all modules in the <code>/plugins/</code> directory. Each modules needs to implement a <code>init</code> function that registers the plugin to the program. The init function receives a <code>factory</code> as an argument which must receive the <code>class</code> and the QML module name to register the class in: <pre><code>class MyClass(Base):\n    # Code here\n\ndef init(factory):\n    factory.register(MyClass, \"QMLModuleName\")\n</code></pre></p> <p>The factory register function allows to set the following arguments:</p> Argument Value Required Description class_reference Class True reference to the class definition QMLModuleName String True The Module name in QML (for imports) version Int False Main version number (default = 1) subversion Int False Subversion number (default = 0) QMLComponentName String False Component name in QML default = __name__ From the Python class <p>In QML the component is then used like: <pre><code>import QMLModuleName 1.0\n\nQMLComponentName {\n\n}\n</code></pre></p> <p>The Plugin Class must implement the method <code>init</code> that receives a <code>matplotlib.axis.Axis</code> object as an argument. It must inherit one of the base classes like <code>matplotlib_qml.plot_objects.Base</code>, <code>matplotlib_qml.artist.Artist</code>. Each object inheriting these classes will receive an Event Handler from the axes which is handed down from the figure <code>self._event_handler</code>. The Event Handler is available after <code>matplotlib_qml.plot_objects.Figure.init</code>is called. You can use this Event Handler to emit or schedule Events whenever the data lying in the plot object changes: <pre><code>self._event_handler.emit(EventTypes.PLOT_DATA_CHANGED) # emit events directly\nself._event_handler.schedule(EventTypes.PLOT_DATA_CHANGED) # schedule events for next cycle\n</code></pre> The <code>Artist</code> class implements a shorthand method <code>schedule_plot_update</code> which schedules a <code>PLOT_DATA_CHANGED</code> event. Available Events can be found in the <code>matplotlib_qml.event.EventTypes</code> class which contains all the constants.</p> <p>You can also register methods to be executed whenever an event is emitted from other components. To do that you need to register the method to the event handler (best to do during <code>init</code>: <pre><code>def init(self, ax):\n    self._plot_obj = ax.plot(self._x_values)\n    # more logic here\n    self._event_handler.register(Eventtypes.PLOT_DATA_CHANGED, self.my_method)\n</code></pre></p> <p>This will result in <code>my_method</code> being executed whenever the event is emitted. You can also create an internal event handler if you need to create events independent to other components or the figure. Note that the figure needs to receive an event in order to rerender after your changes.</p>"},{"location":"write_plugin/#register-a-component-without-using-the-plugin-folder","title":"Register a component without using the plugin folder","text":"<p>In order to use the bridge you need to call the <code>matplotlib_qml.init</code> method. This method registers all the internal components and plugins to QML. You can register your own components before calling this method: <pre><code>from matplotlib_qml import factory, init\nfrom custom_qml_component import CustomQMLComponent\n\nfactory.register(CustomQMLComponent, \"MyModuleName\", qml_component_name = \"CustomComponent\")\ninit()\n</code></pre></p> <p>Register component multiple times</p> <p>Registering the same QML component name twice will result in the first one being erased. The <code>qml_component_name</code> is optional. If it is not provided the <code>Class.__name__</code> attribute is used.</p>"},{"location":"base_classes/artist/","title":"Artist","text":""},{"location":"base_classes/artist/#inherits-from-qobject","title":"Inherits from (QObject)","text":"<p>Wrapper Klasse f\u00fcr matplotlib.artist.Artist</p>"},{"location":"base_classes/artist/#properties","title":"Properties","text":""},{"location":"base_classes/artist/#visible-bool","title":"visible (Bool)","text":"<p>Whether the object is drawn on the Axes or not The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_visible() - Bool set_visible() visible : Bool None"},{"location":"base_classes/artist/#alpha-float","title":"alpha (Float)","text":"<p>The opacity/transparency value of the Artist, This must be a value between 0 and 1. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha : Float None"},{"location":"base_classes/artist/#labelstring","title":"label(String)","text":"<p>The label displayed in the legend of the plot. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"base_classes/artist/#zorderinteger","title":"zOrder(Integer)","text":"<p>Position on the z-axis of the Artist in the drawing hierarchy. Higher means further in the front. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_zorder() - Integer set_zorder() label : Integer None"},{"location":"base_classes/axes_image/","title":"AxesImage","text":""},{"location":"base_classes/axes_image/#inherits-from-_imagebase","title":"Inherits from (_ImageBase)","text":"<p>Wrapper for Matplotlib.image.AxesImage</p>"},{"location":"base_classes/axes_image/#properties","title":"Properties","text":""},{"location":"base_classes/axes_image/#extent-listtuple","title":"extent (List/Tuple)","text":"<p>Describes the bounding box the data is stretched to fill the image. The behaviour is similar to using the <code>xMin</code>, <code>xMax</code>, <code>yMin</code>, <code>yMax</code> properties on the Axis but this won't stretch the image to the desired coordinates. The List or Tuple typically looks like this: <pre><code>extent: [x_min, x_max, y_min, y_max]\n</code></pre> Note that you can only use tuples over the python interface and not in QML. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_extent() - List/Tuple set_extent() extent : List/Tuple None"},{"location":"base_classes/axes_image/#x-arraylist","title":"x (Array/List)","text":"<p>summary.The default is <code>[]</code>. Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x : Array/List None"},{"location":"base_classes/axes_image/#interpolation-string","title":"interpolation (String)","text":"<p>The default is <code>antialiased</code>. Python methods:</p> Name Parameters Return Type get_interpolation() - String set_interpolation() interpolation : String None"},{"location":"base_classes/axes_image/#origin-string","title":"origin (String)","text":"<p>The default is <code>lower</code>. Python methods:</p> Name Parameters Return Type get_origin() - String set_origin() origin : String None"},{"location":"base_classes/axes_image/#resample-bool","title":"resample (Bool)","text":"<p>The default is <code>False</code>. Python methods:</p> Name Parameters Return Type get_resample() - Bool set_resample() resample : Bool None"},{"location":"base_classes/axes_image/#filternorm-bool","title":"filternorm (Bool)","text":"<p>The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Bool set_filternorm() filternorm: Bool None"},{"location":"base_classes/axes_image/#filterrad-float","title":"filterrad (Float)","text":"<p>The default is <code>4.0</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Float set_filternorm() filterrad : Float None"},{"location":"base_classes/axes_image/#visible-bool","title":"visible (Bool)","text":"<p>Whether the object is drawn on the Axes or not The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_visible() - Bool set_visible() visible : Bool None"},{"location":"base_classes/axes_image/#alpha-float","title":"alpha (Float)","text":"<p>The opacity/transparency value of the Artist, This must be a value between 0 and 1. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha : Float None"},{"location":"base_classes/axes_image/#labelstring","title":"label(String)","text":"<p>The label displayed in the legend of the plot. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"base_classes/axes_image/#zorderinteger","title":"zOrder(Integer)","text":"<p>Position on the z-axis of the Artist in the drawing hierarchy. Higher means further in the front. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_zorder() - Integer set_zorder() label : Integer None"},{"location":"base_classes/axes_image/#cmap-string","title":"cMap (String)","text":"<p>The colormap of the ScalarMappable. Can b one of the Matplotlib Colormaps. The default is <code>viridis</code>. Python methods:</p> Name Parameters Return Type get_cmap() - String set_cmap() x : String None"},{"location":"base_classes/axes_image/#vmin-float","title":"vMin (Float)","text":"<p>The minimum value of of the colorscale for the colormap. By default the minimum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmin() - String set_vmin() x : String None"},{"location":"base_classes/axes_image/#vmax-float","title":"vMax (Float)","text":"<p>The maximum value of of the colorscale for the colormap. By default the maximum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmax() - String set_vmax() x : String None"},{"location":"base_classes/axes_image/#colorbar-colorbar","title":"colorbar (Colorbar)","text":"<p>A Colorbar Component. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colorbar() - Colorbar set_colorbar() colorbar : Colorbar None"},{"location":"base_classes/collection/","title":"Collection","text":""},{"location":"base_classes/collection/#inherits-from-artist-scalarmappable","title":"Inherits from (Artist, ScalarMappable)","text":"<p>Wrapper for Matplotlib.collections.Collection</p>"},{"location":"base_classes/collection/#properties","title":"Properties","text":""},{"location":"base_classes/collection/#colors-arraylist","title":"colors (Array/List)","text":"<p>A list of values describing the colors in a colormap for each element of the collection. This property is prioritized over color The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colors() - Array/List set_colors() colors : Array/List None"},{"location":"base_classes/collection/#color-string","title":"color (String)","text":"<p>A string with the color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"base_classes/collection/#markeredgecolors-arraylist","title":"markerEdgeColors (Array/List)","text":"<p>A list of values describing the border colors in a colormap for each element of the collection. This property is prioritized over markerEdgeColor The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolors() - Array/List set_edgecolors() markerEdgeColors: Array/List None"},{"location":"base_classes/collection/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>A string with the border color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolor() - String set_edgecolor() markerEdgeColor: String None"},{"location":"base_classes/collection/#linewidths-arraylist","title":"linewidths (Array/List)","text":"<p>A list of values thickness of the line stroke for each element of the collection. This property is prioritized over linewidth The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidths() - Array/List set_linewidths() linewidths: Array/List None"},{"location":"base_classes/collection/#linewidth-float","title":"linewidth (Float)","text":"<p>A float value with the line stroke thickness for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidth() - Float set_linewidth() linewidth: Float None"},{"location":"base_classes/collection/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle: String None"},{"location":"base_classes/collection/#hatch-string","title":"hatch (String)","text":"<p>The hatch pattern for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_hatch() - String set_hatch() hatch: String None"},{"location":"base_classes/collection_with_sizes/","title":"_CollectionWithSizes","text":""},{"location":"base_classes/collection_with_sizes/#inherits-from-collection","title":"Inherits from (Collection)","text":"<p>Wrapper for Matplotlib.collection._CollectionWithSizes</p>"},{"location":"base_classes/collection_with_sizes/#properties","title":"Properties","text":""},{"location":"base_classes/collection_with_sizes/#markersizes-arraylist","title":"markerSizes (Array/List)","text":"<p>A list containing the sizes for each individual object in the collection The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_sizes() - Array/List set_sizes() markerSizes : Array/List None"},{"location":"base_classes/collection_with_sizes/#markersize-float","title":"markerSize (Float)","text":"<p>A list containing the sizes for each individual object in the collection The default is <code>20</code>. Python methods:</p> Name Parameters Return Type get_size() - Float set_size() markerSize : Float None"},{"location":"base_classes/collection_with_sizes/#colors-arraylist","title":"colors (Array/List)","text":"<p>A list of values describing the colors in a colormap for each element of the collection. This property is prioritized over color The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colors() - Array/List set_colors() colors : Array/List None"},{"location":"base_classes/collection_with_sizes/#color-string","title":"color (String)","text":"<p>A string with the color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"base_classes/collection_with_sizes/#markeredgecolors-arraylist","title":"markerEdgeColors (Array/List)","text":"<p>A list of values describing the border colors in a colormap for each element of the collection. This property is prioritized over markerEdgeColor The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolors() - Array/List set_edgecolors() markerEdgeColors: Array/List None"},{"location":"base_classes/collection_with_sizes/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>A string with the border color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolor() - String set_edgecolor() markerEdgeColor: String None"},{"location":"base_classes/collection_with_sizes/#linewidths-arraylist","title":"linewidths (Array/List)","text":"<p>A list of values thickness of the line stroke for each element of the collection. This property is prioritized over linewidth The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidths() - Array/List set_linewidths() linewidths: Array/List None"},{"location":"base_classes/collection_with_sizes/#linewidth-float","title":"linewidth (Float)","text":"<p>A float value with the line stroke thickness for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidth() - Float set_linewidth() linewidth: Float None"},{"location":"base_classes/collection_with_sizes/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle: String None"},{"location":"base_classes/collection_with_sizes/#hatch-string","title":"hatch (String)","text":"<p>The hatch pattern for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_hatch() - String set_hatch() hatch: String None"},{"location":"base_classes/image_base/","title":"ImageBase","text":""},{"location":"base_classes/image_base/#inherits-from-artist-scalarmappable","title":"Inherits from (Artist, ScalarMappable)","text":"<p>Wrapper for Matplotlib.image._ImageBase</p>"},{"location":"base_classes/image_base/#properties","title":"Properties","text":""},{"location":"base_classes/image_base/#x-arraylist","title":"x (Array/List)","text":"<p>summary.The default is <code>[]</code>. Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x : Array/List None"},{"location":"base_classes/image_base/#interpolation-string","title":"interpolation (String)","text":"<p>The default is <code>antialiased</code>. Python methods:</p> Name Parameters Return Type get_interpolation() - String set_interpolation() interpolation : String None"},{"location":"base_classes/image_base/#origin-string","title":"origin (String)","text":"<p>The default is <code>lower</code>. Python methods:</p> Name Parameters Return Type get_origin() - String set_origin() origin : String None"},{"location":"base_classes/image_base/#resample-bool","title":"resample (Bool)","text":"<p>The default is <code>False</code>. Python methods:</p> Name Parameters Return Type get_resample() - Bool set_resample() resample : Bool None"},{"location":"base_classes/image_base/#filternorm-bool","title":"filternorm (Bool)","text":"<p>The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Bool set_filternorm() filternorm: Bool None"},{"location":"base_classes/image_base/#filterrad-float","title":"filterrad (Float)","text":"<p>The default is <code>4.0</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Float set_filternorm() filterrad : Float None"},{"location":"base_classes/image_base/#visible-bool","title":"visible (Bool)","text":"<p>Whether the object is drawn on the Axes or not The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_visible() - Bool set_visible() visible : Bool None"},{"location":"base_classes/image_base/#alpha-float","title":"alpha (Float)","text":"<p>The opacity/transparency value of the Artist, This must be a value between 0 and 1. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha : Float None"},{"location":"base_classes/image_base/#labelstring","title":"label(String)","text":"<p>The label displayed in the legend of the plot. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"base_classes/image_base/#zorderinteger","title":"zOrder(Integer)","text":"<p>Position on the z-axis of the Artist in the drawing hierarchy. Higher means further in the front. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_zorder() - Integer set_zorder() label : Integer None"},{"location":"base_classes/image_base/#cmap-string","title":"cMap (String)","text":"<p>The colormap of the ScalarMappable. Can b one of the Matplotlib Colormaps. The default is <code>viridis</code>. Python methods:</p> Name Parameters Return Type get_cmap() - String set_cmap() x : String None"},{"location":"base_classes/image_base/#vmin-float","title":"vMin (Float)","text":"<p>The minimum value of of the colorscale for the colormap. By default the minimum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmin() - String set_vmin() x : String None"},{"location":"base_classes/image_base/#vmax-float","title":"vMax (Float)","text":"<p>The maximum value of of the colorscale for the colormap. By default the maximum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmax() - String set_vmax() x : String None"},{"location":"base_classes/image_base/#colorbar-colorbar","title":"colorbar (Colorbar)","text":"<p>A Colorbar Component. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colorbar() - Colorbar set_colorbar() colorbar : Colorbar None"},{"location":"base_classes/overview/","title":"Overview","text":"<p>The base classes are building blocks that are oriented on the inheritance tree from matplotlib to make building the QML components more intuitive.</p>"},{"location":"base_classes/patch/","title":"Patch","text":""},{"location":"base_classes/patch/#properties","title":"Properties","text":"<ul> <li>antialiased</li> <li>edgeColor</li> <li>faceColor</li> <li>color</li> <li>linewidth</li> <li>linestyle</li> <li>hatch</li> <li>fill</li> <li>capstyle</li> <li>joinstyle</li> <li>visible</li> <li>alpha</li> <li>label</li> <li>zOrder</li> </ul>"},{"location":"base_classes/poly_collection/","title":"PolyCollection","text":""},{"location":"base_classes/poly_collection/#inherits-from-_collectionwithsizes","title":"Inherits from (_CollectionWithSizes)","text":"<p>Wrapper for Matplotlib.collection.PolyCollection</p>"},{"location":"base_classes/poly_collection/#properties","title":"Properties","text":""},{"location":"base_classes/polygon/","title":"Polygon","text":""},{"location":"base_classes/polygon/#inherits-from-patch","title":"Inherits from (Patch)","text":"<p>Wrapper for Matplotlib.patches.Polygon</p>"},{"location":"base_classes/polygon/#properties","title":"Properties","text":""},{"location":"base_classes/polygon/#closed-bool","title":"closed (Bool)","text":"<p>Wether the Polygon is closed. This usually results in the border line being open since no close vertice is created.The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_closed() - Bool set_closed() closed  : Bool None"},{"location":"base_classes/scalar_mappable/","title":"ScalarMappable","text":""},{"location":"base_classes/scalar_mappable/#wrapper-for-matplotlibcmscalarmappable","title":"Wrapper for Matplotlib.cm.ScalarMappable","text":""},{"location":"base_classes/scalar_mappable/#properties","title":"Properties","text":""},{"location":"base_classes/scalar_mappable/#cmap-string","title":"cMap (String)","text":"<p>The colormap of the ScalarMappable. Can b one of the Matplotlib Colormaps. The default is <code>viridis</code>. Python methods:</p> Name Parameters Return Type get_cmap() - String set_cmap() x : String None"},{"location":"base_classes/scalar_mappable/#vmin-float","title":"vMin (Float)","text":"<p>The minimum value of of the colorscale for the colormap. By default the minimum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmin() - String set_vmin() x : String None"},{"location":"base_classes/scalar_mappable/#vmax-float","title":"vMax (Float)","text":"<p>The maximum value of of the colorscale for the colormap. By default the maximum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmax() - String set_vmax() x : String None"},{"location":"base_classes/scalar_mappable/#colorbar-colorbar","title":"colorbar (Colorbar)","text":"<p>A Colorbar Component. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colorbar() - Colorbar set_colorbar() colorbar : Colorbar None"},{"location":"components/annotation/","title":"Annotation","text":"<p>A wrapper for matplotlib.axis.Axis.annotate. The Annotation is used to display text in a Plot. Under the hood it's a Text object from Matplotlib. Check out the Matplotlib Documentation for more information.</p> Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            Component.onCompleted: init()\n            coordinatesRefreshRate: 1000\n            Plot {\n                Axis {\n                    Line {\n                        xData: [10,20,30]\n                        yData: [10,20,30]\n                    }\n                    Annotation {\n                        id: annotation\n                        text: \"Hello World\"\n                        xy: [10, 20]\n                        xyText: [10, 15]\n                        fontSize: 25\n                        alpha: 0.5\n                        color: \"blue\"\n                        arrowProps: {\n                            \"width\": 5,\n                        }\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/annotation/#properties","title":"Properties","text":""},{"location":"components/annotation/#color-string","title":"color (String)","text":"<p>Use this to set one color for the Annotation. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/annotation/#text-string","title":"text (String)","text":"<p>This defines the displayed text. Note that Math formulars are not supported yet because it's a nightmare to translate LaTeX Code from QML to Python. It should be possible to use it from Python code however. Python methods:</p> Name Parameters Return Type get_text() - String set_text() text : String None"},{"location":"components/annotation/#xy-arraylist","title":"xy (Array/List)","text":"<p>The xy coordinates of the POINT that you want to annotate. This is not the position of where the text will be displayed but the position the arrow will point towards. Python methods:</p> Name Parameters Return Type get_xy() - Array/List set_xy() xy : Array/List None"},{"location":"components/annotation/#xytext-arraylist","title":"xyText (Array/List)","text":"<p>The xy coordinates of the TEXT that you want to display. Python methods:</p> Name Parameters Return Type get_xyText() - Array/List set_xyText() xyText : Array/List None"},{"location":"components/annotation/#xycoords-string","title":"xyCoords (String)","text":"<p>The coordinate system that describes how the coordinates provided shall be interpreted. Allowed types are in the Matplotlib Documentation The default is <code>\"data\"</code>. Python methods:</p> Name Parameters Return Type get_xycoords() - String set_xycoords() xycoords : String None"},{"location":"components/annotation/#fontsize-float","title":"fontSize (Float)","text":"<p>The fontSize in points. The default is <code>10.0</code>. Python methods:</p> Name Parameters Return Type get_fontsize() - Float set_fontsize() fontsize : Float None"},{"location":"components/annotation/#fontstyle-string","title":"fontStyle (String)","text":"<p>The font style to be used. Valid values are: ('normal', 'italic', 'oblique'). The default is <code>\"normal\"</code>. Python methods:</p> Name Parameters Return Type get_fontstyle() - String set_fontstyle() fontstyle : String None"},{"location":"components/annotation/#fontweight-string","title":"fontWeight (String)","text":"<p>This is a value for \"boldness\" or how thick the text will be rendered. Valid values are: ('ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'). The default is <code>\"normal\"</code>. Python methods:</p> Name Parameters Return Type get_fontweight() - String set_fontweight() fontweight : String None"},{"location":"components/annotation/#fontfamily-string","title":"fontFamily (String)","text":"<p>The font family of the text. Valid values are: ('serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'). The default is <code>\"serif\"</code>. Python methods:</p> Name Parameters Return Type get_fontfamily() - String set_fontfamily() fontfamily : String None"},{"location":"components/annotation/#rotation-float","title":"rotation (Float)","text":"<p>The rotation of the text around the anchorpoint in degrees.  The default is <code>0.0</code>. Python methods:</p> Name Parameters Return Type get_rotation() - Float set_rotation() rotation : Float None"},{"location":"components/axes/","title":"Wrapper for Matplotlib.axes.Axes","text":"<p>If you want to get the Matplotlib Axes object from the wrapper class you can use the <code>get_matplotlib_ax_object</code> method on the <code>Axes</code> object.</p> <p>Note: right now the actual class is still called Axis but will be completely renamed to Axes in a few minor releases.</p>"},{"location":"components/axes/#example-usage","title":"Example usage","text":"<p>The Axis is a child of a <code>Plot</code> and parent to all the different Plot-Objects. The <code>Axis</code> wraps around the Matplotlib <code>axes</code> object. <pre><code>Figure {\n    faceColor: \"blue\"\n    Component.onCompleted: init()\n    Plot {\n        faceColor: \"red\"\n        Axes {\n            // Plot Objects here\n        }\n    }\n}\n</code></pre></p> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axes {\n                    grid: true\n                    gridColor: \"white\"\n                    gridLinestyle: \"dashed\"\n                    gridAlpha: 0.7\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"X-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    autoscale: \"x\"\n                    yMin: -1\n                    yMax: 30                    \n                    Line {\n                        xData: [10,20,30]\n                        yData: [10,20,30]\n                        label: \"QML\"\n                    }\n                    Component.onCompleted: plot([15, 25], [10, 20], {label: \"SLOT\"})\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/axes/#properties","title":"Properties","text":""},{"location":"components/axes/#xscale-string","title":"xScale (String)","text":"<p>The scale on the X-Axis. See matplotlib.axes.Axes.set_xscale for more details. Kwargs are not yet supported. The default and fallback if a provided scale is invalid is <code>linear</code>. Python methods:</p> Name Parameters Return Type get_xscale() - String set_xscale() scale : String None"},{"location":"components/axes/#yscale-string","title":"yScale (String)","text":"<p>The scale on the Y-Axis. See matplotlib.axes.Axes.set_xscale for more details. Kwargs are not yet supported. The default and fallback if a provided scale is invalid is <code>linear</code>. Python methods:</p> Name Parameters Return Type get_yscale() - String set_yscale() scale : String None"},{"location":"components/axes/#projection-string","title":"projection (String)","text":"<p>The projection of the Axis. Check out Matplotlib documentation for available projections. The projection can't be changed during runtime. The default is <code>\"rectilinear\"</code>.</p>"},{"location":"components/axes/#polar","title":"polar","text":"<p>Currently defined but not implemented since it is a projection.</p>"},{"location":"components/axes/#sharex","title":"sharex","text":"<p>Currently only a placeholder to allow different multiple Axis behaviour in the future.</p>"},{"location":"components/axes/#sharey","title":"sharey","text":"<p>Currently only a placeholder to allow different multiple Axis behaviour in the future.</p>"},{"location":"components/axes/#grid-boolean","title":"grid (Boolean)","text":"<p>Wether to draw a grid between the axis Ticks. The default is <code>false</code>. Python methods:</p> Name Parameters Return Type get_grid() - Boolean set_grid() grid : Boolean None"},{"location":"components/axes/#gridcolor-string","title":"gridColor (String)","text":"<p>Color of the grid. The default is <code>\"grey\"</code>. Python methods:</p> Name Parameters Return Type get_grid_color() - String set_grid_color() color : String None"},{"location":"components/axes/#gridlinestyle-string","title":"gridLinestyle (String)","text":"<p>Linestyle of the grid The default is <code>\"-\"</code>. Python methods:</p> Name Parameters Return Type get_grid_linestyle() - String set_grid_linestyle() linestyle : String None"},{"location":"components/axes/#gridlinewidth-integer","title":"gridLinewidth (Integer)","text":"<p>Linewidth of the grid. The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_grid_linestyle() - String set_grid_linestyle() linestyle : String None"},{"location":"components/axes/#gridalpha-float","title":"gridAlpha (Float)","text":"<p>The alpha value of the grid. The default is <code>1.0</code>. Python methods:</p> Name Parameters Return Type get_grid_alpha() - Float set_grid_alpha() alpha : Float None"},{"location":"components/axes/#xaxislabel-string","title":"xAxisLabel (String)","text":"<p>Defines the label on the X-Axis. The default is <code>\"\"</code>. Python methods:</p> Name Parameters Return Type get_x_axis_label() - String set_x_axis_label() label : String None"},{"location":"components/axes/#xaxislabelfontsize-integer","title":"xAxisLabelFontSize (Integer)","text":"<p>The Point size of the X-Axis Label. The default is <code>12</code>. Python methods:</p> Name Parameters Return Type get_x_axis_label_fontsize() - Integer set_x_axis_label_fontsize() fontsize : Integer None"},{"location":"components/axes/#xaxistickcolor-string","title":"xAxisTickColor (String)","text":"<p>Color of the Ticks on the X-Axis. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_x_axis_tick_color() - String set_x_axis_tick_color() color : String None"},{"location":"components/axes/#xaxismajorticks-list","title":"xAxisMajorTicks (List)","text":"<p>A list/array with positions of the major ticks on the X-Axis. The default is <code>None</code>. <code>None</code> can't be set from QML since it is another type. Use the reset slot <code>reset_x_ticks()</code> for that. Python methods:</p> Name Parameters Return Type get_x_axis_major_ticks() - List/Array set_x_axis_major_ticks() ticks : List/Array None"},{"location":"components/axes/#xaxisminorticks-list","title":"xAxisMinorTicks (List)","text":"<p>A list/array with positions of the minor ticks on the X-Axis. The default is <code>None</code>. <code>None</code> can't be set from QML since it is another type. Use the reset slot <code>reset_x_ticks()</code> for that. Python methods:</p> Name Parameters Return Type get_x_axis_minor_ticks() - List/Array set_x_axis_minor_ticks() ticks : List/Array None"},{"location":"components/axes/#xaxislabelcolor-string","title":"xAxisLabelColor (String)","text":"<p>Color of the X-Axis Label Text. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_x_axis_label_color() - String set_x_axis_label_color() color : String None"},{"location":"components/axes/#yaxislabel-string","title":"yAxisLabel (String)","text":"<p>Defines the label on the Y-Axis. The default is <code>\"\"</code>. Python methods:</p> Name Parameters Return Type get_y_axis_label() - String set_y_axis_label() label : String None"},{"location":"components/axes/#yaxislabelfontsize-integer","title":"yAxisLabelFontSize (Integer)","text":"<p>The Point size of the Y-Axis Label. The default is <code>12</code>. Python methods:</p> Name Parameters Return Type get_y_axis_label_fontsize() - Integer set_y_axis_label_fontsize() fontsize : Integer None"},{"location":"components/axes/#yaxistickcolor-string","title":"yAxisTickColor (String)","text":"<p>Color of the Ticks on the Y-Axis. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_y_axis_tick_color() - String set_y_axis_tick_color() color : String None"},{"location":"components/axes/#yaxismajorticks-list","title":"yAxisMajorTicks (List)","text":"<p>A list/array with positions of the major ticks on the Y-Axis. The default is <code>None</code>. <code>None</code> can't be set from QML since it is another type. Use the reset slot <code>reset_y_ticks()</code> for that. Python methods:</p> Name Parameters Return Type get_y_axis_major_ticks() - List/Array set_y_axis_major_ticks() ticks : List/Array None"},{"location":"components/axes/#yaxisminorticks-list","title":"yAxisMinorTicks (List)","text":"<p>A list/array with positions of the minor ticks on the Y-Axis. The default is <code>None</code>. <code>None</code> can't be set from QML since it is another type. Use the reset slot <code>reset_y_ticks()</code> for that. Python methods:</p> Name Parameters Return Type get_y_axis_minor_ticks() - List/Array set_y_axis_minor_ticks() ticks : List/Array None"},{"location":"components/axes/#yaxislabelcolor-string","title":"yAxisLabelColor (String)","text":"<p>Color of the Y-Axis Label Text. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_y_axis_label_color() - String set_y_axis_label_color() color : String None"},{"location":"components/axes/#autoscale-string-can-be-both-x-y-overwrites-axis-limits","title":"autoscale (String) (can be \"both\", \"x\", \"y\", \"\". Overwrites axis limits)","text":"<p>Specifys on what dimension the axis will scale automatically. Can be either <code>\"x\"</code>, <code>\"y\"</code>, <code>\"both\"</code> or <code>\"\"</code>. Turning on autoscaling will overwrite the limits of the axis in that dimension. The default is <code>\"both</code>\". Python methods:</p> Name Parameters Return Type get_autoscale() - String set_autoscale() autoscale : String None"},{"location":"components/axes/#xmin-float","title":"xMin (Float)","text":"<p>The lowest X-Value on the X-Axis. Internally this is handled as a list with two elements (x_min, x_max). The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_xmin() - Float set_xmin() xmin : Float None"},{"location":"components/axes/#xmax","title":"xMax","text":"<p>The highest X-Value on the X-Axis. Internally this is handled as a list with two elements (x_min, x_max). The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_xmax() - Float set_xmax() xmax : Float None"},{"location":"components/axes/#ymin-float","title":"yMin (Float)","text":"<p>The lowest Y-Value on the Y-Axis. Internally this is handled as a list with two elements (y_min, y_max). The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_ymin() - Float set_ymin() ymin : Float None"},{"location":"components/axes/#ymax","title":"yMax","text":"<p>The highest Y-Value on the Y-Axis. Internally this is handled as a list with two elements (y_min, y_max). The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_ymax() - Float set_ymax() ymax : Float None"},{"location":"components/axes/#slots","title":"Slots","text":""},{"location":"components/axes/#reset","title":"reset()","text":"<p>Removes all the Plot Objects that have been added to the axis object via Slots or Python Code. Keeps the objects defined in QML. It explicitly checks the <code>lines</code>, <code>containers</code> and \u00ecmages<code>attributes of the Matplotlib Axe object and calls the</code>remove()` method on those which aren't defined in QML.</p>"},{"location":"components/axes/#plotx-y-kwargs","title":"plot(x, y, kwargs = {})","text":"<p>Same as <code>ax.plot()</code> in Matplotlib, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#scatterx-y-kwargs","title":"scatter(x, y, kwargs = {})","text":"<p>Same as <code>ax.plot()</code> in Matplotlib but the linestyle is set to <code>\" \"</code> which is equivalent to no line at all, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#hliney-kwargs","title":"hline(y, kwargs = {})","text":"<p>Same as <code>ax.axhline()</code> in Matplotlib, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#vlinex-kwargs","title":"vline(x, kwargs = {})","text":"<p>Same as <code>ax.axvline()</code> in Matplotlib, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#hspany_min-y_max-kwargs","title":"hspan(y_min, y_max, kwargs = {})","text":"<p>Same as <code>ax.axhspan()</code> in Matplotlib, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#vspanx_min-x_max-kwargs","title":"vspan(x_min, x_max, kwargs = {})","text":"<p>Same as <code>ax.axvspan()</code> in Matplotlib, kwargs dictionary is optional but you do need to provide additonal keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#tick_paramsaxis-kwargs","title":"tick_params(axis, kwargs)","text":"<p>Same as <code>ax.tick_params</code> in Matplotlib but you do need to provide keyword arguments as a dictionary or javascript-object.</p>"},{"location":"components/axes/#reset_x_ticks","title":"reset_x_ticks()","text":"<p>Sets the major and minor ticks on the X-Axis to the <code>AutoLocator</code> object from Matplotlib. It will also set the QML Propertys <code>xAxisMajorTicks</code> and <code>xAxisMinorTicks</code> to <code>None</code> internally.</p>"},{"location":"components/axes/#reset_y_ticks","title":"reset_y_ticks()","text":"<p>Sets the major and minor ticks on the Y-Axis to the <code>AutoLocator</code> object from Matplotlib. It will also set the QML Propertys <code>yAxisMajorTicks</code> and <code>yAxisMinorTicks</code> to <code>None</code> internally.</p>"},{"location":"components/bar/","title":"Bar","text":"<p>The Bar Plot is a bit special since it is handled in a Container of Bar objects which can't be modified easily. Thats why the Bar plot object has it's own event handler to schedule a complete reinstantiation of the Bar plot whenever a property changes. This causes overhead and should be noted before use.</p>"},{"location":"components/bar/#example","title":"Example","text":"<pre><code>Bar {\n    id: bar\n    x: [1,2,3,4,5,6,7,8,9]\n    height: [1,2,3,4,5,6,7,8,9]\n    widths: [0.3, 0.5, 0.7, 0.3, 0.5, 0.7, 0.3, 0.5, 0.7]\n    bottoms: [0, 1, 2, 0, 1, 2, 0, 1, 2]\n    colors: [\"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\"]\n    edgecolor: \"white\"\n    linewidth: 5\n    xerr: [0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3]\n    yerr: [0.1,0.2,0.3,0.1,0.2,0.3,0.1,0.2,0.3]\n    ecolor: \"pink\"\n    capsize: 3\n    alpha: 0.8\n    label: \"bar\"\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n\n        RowLayout {     \n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n\n                    Bar {\n                        id: bar\n                        x: [1,2,3,4,5,6,7,8,9]\n                        height: [1,2,3,4,5,6,7,8,9]\n                        widths: [0.3, 0.5, 0.7, 0.3, 0.5, 0.7, 0.3, 0.5, 0.7]\n                        bottoms: [0, 1, 2, 0, 1, 2, 0, 1, 2]\n                        colors: [\"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\", \"red\", \"green\", \"blue\"]\n                        edgecolor: \"white\"\n                        linewidth: 5\n                        xerr: [0.1, 0.2, 0.3, 0.1, 0.2, 0.3, 0.1, 0.2, 0.3]\n                        yerr: [0.1,0.2,0.3,0.1,0.2,0.3,0.1,0.2,0.3]\n                        ecolor: \"pink\"\n                        capsize: 3\n                        alpha: 0.8\n                        label: \"bar\"\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre> <p>Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x : Array/List None"},{"location":"components/bar/#height-arraylist","title":"height (Array/List)","text":"<p>The heights of the different Bars.  Python methods:</p> Name Parameters Return Type get_height() - Array/List set_height() height : Array/List None"},{"location":"components/bar/#widths-listarray","title":"widths (List/Array)","text":"<p>A List of widths for the individual bars. This is prioritized over the <code>width</code> property. values must be 0 &lt; width &lt; 1. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_widths() - List/Array set_widths() widths : List/Array None"},{"location":"components/bar/#width-float","title":"width (Float)","text":"<p>The width of all the bars. 1 = the bars have no gap in between. values must be 0 &lt; width &lt; 1. The default is <code>0.8</code>. Python methods:</p> Name Parameters Return Type get_width() - Float set_width() width : Float None"},{"location":"components/bar/#bottoms-listarray","title":"bottoms (List/Array)","text":"<p>A List of values describing the position where the bars start on the y-axis. This is prioritized over the <code>bottom</code> property. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_bottoms() - List/Array set_bottoms() bottoms : List/Array None"},{"location":"components/bar/#bottom-float","title":"bottom (Float)","text":"<p>Defines where the bars start on the y-axis. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_width() - Float set_width() width : Float None"},{"location":"components/bar/#align-string","title":"align (String)","text":"<p>Where to position the base of the bar on the X-Axis. The default is <code>center</code>. Python methods:</p> Name Parameters Return Type get_align() - String set_align() align : String None"},{"location":"components/bar/#colors-arraylist","title":"colors (Array/List)","text":"<p>Overwrites the <code>color</code> property and gives each bar it's own color. Must have the same shape as <code>x</code> and <code>height</code>. If you set this to an empty Array/List it will fall back to the <code>color</code> property. Python methods:</p> Name Parameters Return Type get_colors() - Array/List set_colors() colors : Array/List None"},{"location":"components/bar/#color-string","title":"color (String)","text":"<p>Use this to set one color for all of the bars. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/bar/#edgecolors-arraylist","title":"edgecolors (Array/List)","text":"<p>The border colors of the individual bar patches. This is being prioritized over <code>edgecolor</code> Python methods:</p> Name Parameters Return Type get_edgecolors() - Array/List set_edgecolors() edgecolors : Array/List None"},{"location":"components/bar/#edgecolor-string","title":"edgecolor (String)","text":"<p>Use this to set one color for all of the bars. Python methods:</p> Name Parameters Return Type get_edgecolor() - String set_edgecolor() edgecolor : String None"},{"location":"components/bar/#linewidths-arraylist","title":"linewidths (Array/List)","text":"<p>The thickness of the border line for each individual bar patch. This is being prioritized over <code>linewidth</code> Python methods:</p> Name Parameters Return Type get_linewidths() - Array/List set_linewidths() linewidths: Array/List None"},{"location":"components/bar/#linewidth-float","title":"linewidth (Float)","text":"<p>The border thickness of the bar patches. The default is: <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidth() - Float set_linewidth() linewidth : Float None"},{"location":"components/bar/#ticklabels-arraylist","title":"tickLabels (Array/List)","text":"<p>Modifies the ticks displayed on the x-axis for the bar plot. This will modify the ticks on the Axes object Python methods:</p> Name Parameters Return Type get_tick_label() - Array/List set_tick_label() tick_label: Array/List None"},{"location":"components/bar/#xerr-arraylist","title":"xerr (Array/List)","text":"<p>The values of the error bars thats spans over the bar patch along the x-axis Python methods:</p> Name Parameters Return Type get_xerr() - Array/List set_xerr() xerr: Array/List None"},{"location":"components/bar/#yerr-arraylist","title":"yerr (Array/List)","text":"<p>The values of the error bars thats spans over the bar patch along the y-axis Python methods:</p> Name Parameters Return Type get_yerr() - Array/List set_yerr() yerr: Array/List None"},{"location":"components/bar/#ecolor-arraylist","title":"ecolor (Array/List)","text":"<p>The color of the error bars Python methods:</p> Name Parameters Return Type get_ecolor() - Array/List set_ecolor() ecolor: Array/List None"},{"location":"components/bar/#capsize-float","title":"capsize (Float)","text":"<p>The length of the error bar caps in points. The default is: <code>None</code>. Python methods:</p> Name Parameters Return Type get_capsize() - Float set_capsize() capsize: Float None"},{"location":"components/bar/#error_kw-dictionary-javascript-object-qvariantmap","title":"error_kw (Dictionary, Javascript Object, \"QVariantMap\")","text":"<p>A Dictionary with keyword arguments that are passed to the error bars. Those arguments are prioritized over the other properties Python methods:</p> Name Parameters Return Type get_error_kw() - Dictionary set_error_kw() error_kw: Dictionary None"},{"location":"components/bar/#alpha-float","title":"alpha (Float)","text":"<p>Alpha value of the bar patches. The default is: <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha: Float None"},{"location":"components/bar/#label-string","title":"label (String)","text":"<p>Alpha value of the bar patches. The default is: <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - String set_alpha() alpha: String None"},{"location":"components/colorbar/","title":"Colorbar","text":"<p>Wrapper for the matplotlib.pyplot.colorbar object.</p> <p>The colorbar creates a new Axes object on the existing Axis it is drawn into. This causes the figure to reposition the plots and can cause unexpected behaviour when changing some properties while using the <code>tightLayout</code> slot on the figure. Since some property-changes result in a reinstantiation of the colorbar, the whole axis is removed and then reinstantiated again if needed. This is to enable/disable the colorbar at runtime. To ensure the plot is being drawn correctly after the colorbar is removed the <code>tightLayout</code> slot is called on the figure.</p>"},{"location":"components/colorbar/#example-usage","title":"Example usage","text":"<p>The Colorbar QML type can be used on the property <code>colorbar</code> of the Scalarmappables <code>ScatterCollection</code> and <code>Imshow</code></p> <pre><code>Figure {\n    Layout.fillWidth: true\n    Layout.fillHeight: true\n    Component.onCompleted: init()\n    coordinatesRefreshRate: 1000\n    Plot {\n        Axis {\n            Imshow {\n                x: [[1, 2, 3], [3, 2, 1]]\n                vMin: 0\n                vMax: 10\n                colorbar: Colorbar {\n                    id: cbar\n                    tickColor: \"white\"\n                    tickLabelColor: \"white\"\n                    label: \"Colorbar\"\n                    orientation: \"horizontal\"\n                    fraction: 0.15\n                    shrink: 1.0\n                    aspect: 20\n                    drawEdges: true\n                    labelLocation: \"center\"\n                    labelColor: \"white\"\n                    labelFontSize: 20\n                }\n            }\n        }\n    }\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"X-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"                \n                    Imshow {\n                        x: [[1,2,3], [2,3,4]]\n                        cMap: \"gist_rainbow\"\n                        aspect: \"auto\"\n                        extent: [0, 3, 0, 4]\n                        colorbar: Colorbar {\n                            tickColor: \"white\"\n                            tickLabelColor: \"white\"\n                            label: \"Colorbar\"\n                            orientation: \"horizontal\"\n                            fraction: 0.15\n                            shrink: 1.0\n                            aspect: 20\n                            drawEdges: true\n                            labelLocation: \"center\"\n                            labelColor: \"white\"\n                            labelFontSize: 20\n                        }                       \n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/colorbar/#properties","title":"Properties","text":""},{"location":"components/colorbar/#orientation-string","title":"orientation (String)","text":"<p>The orientation of the Colorbar can be either horizontal or vertical. In Matplotlib 3.3.3 (The version on the Analyzer) <code>location</code> and <code>orientation</code> is mutually exclusive so make sure you only set one of them! The default is <code>vertical</code>. Python methods:</p> Name Parameters Return Type get_orientation() - String set_orientation() orientation : String None"},{"location":"components/colorbar/#label-string","title":"label (String)","text":"<p>The label of the Colorbar. The position can be adjusted with the location property. The default is <code>\"\"</code>. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"components/colorbar/#location","title":"location (String)","text":"<p>The position of the Colorbar relative to the plot it is used with. Note that for the orientation <code>horizontal</code> the colorbar can be only above or underneath the plot. In Matplotlib 3.3.3 (The version on the Analyzer) <code>location</code> and <code>orientation</code> is mutually exclusive so make sure you only set one of them! The default is <code>\"right\"</code>. Python methods:</p> Name Parameters Return Type get_location() - String set_location() location : String None"},{"location":"components/colorbar/#fraction-float","title":"fraction (Float)","text":"<p>The new Axis for the Colorbar will \"steal\" space from the axis it is drawn next to. The fraction defines how much space of the axis the colorbar will steal for it's own axis. The default is <code>0.15</code>. Python methods:</p> Name Parameters Return Type get_fraction() - Float set_fraction() fraction : Float None"},{"location":"components/colorbar/#shrink-float","title":"shrink (Float)","text":"<p>A multiplier of how much the colorbar will shrink compared to the dimension of the plot it is used with. The default is <code>1.0</code>. Python methods:</p> Name Parameters Return Type get_shrink() - Float set_shrink() shrink : Float None"},{"location":"components/colorbar/#aspect-integer","title":"aspect (Integer)","text":"<p>The default is <code>20</code>. Python methods:</p> Name Parameters Return Type get_aspect() - Integer set_aspect() aspect : Integer None"},{"location":"components/colorbar/#drawedges-bool","title":"drawEdges (Bool)","text":"<p>Draws \"steps\" into the colorbar. The default is <code>False</code>. Python methods:</p> Name Parameters Return Type get_drawedges() - Bool set_drawedges() drawEdges : Bool None"},{"location":"components/colorbar/#filled-bool","title":"filled (Bool)","text":"<p>Whether the Colorbar is filled with the color gradient. The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_filled() - Bool set_filled() filled : Bool None"},{"location":"components/colorbar/#tickcolorstring","title":"tickColor(String)","text":"<p>The color of the ticks on the axis. The ticks will always be on the long axis (i.e. on the y-axis if location is \"bottom\").  The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_tickcolor() - String set_tickcolor() tickColor: String None"},{"location":"components/colorbar/#ticklabelcolorstring","title":"tickLabelColor(String)","text":"<p>The color of the ticks marking the distances on the long axis. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_tick_label_color() - String set_tick_label_color() tickLabelColor: String None"},{"location":"components/colorbar/#labellocation-string","title":"labelLocation (String)","text":"<p>Whether the Colorbar is filled with the color gradient. For horizontal orientation it can be (left, center, right). For vertical orientation it can be (bottom, center, top). The default is <code>\"center\"</code>. Python methods:</p> Name Parameters Return Type get_label_location() - String set_label_location() labelLocation : String None"},{"location":"components/colorbar/#labelcolorstring","title":"labelColor(String)","text":"<p>The color of the label written next to the long axis. The default is <code>\"black\"</code>. Python methods:</p> Name Parameters Return Type get_label_color() - String set_label_color() labelColor: String None"},{"location":"components/colorbar/#labelfontsizestring","title":"labelFontSize(String)","text":"<p>The color of the label written next to the long axis. The default is <code>12</code>. Python methods:</p> Name Parameters Return Type get_label_fontsize() - Int set_label_font_size() labelFontSize: Int None"},{"location":"components/figure/","title":"Figure","text":""},{"location":"components/figure/#example-usage","title":"Example usage","text":"<p>You need to call the init method after the QML objects have been instantiated in order for the Figure to create the wrapped matplotlib objects. <pre><code>Figure {\n    faceColor: \"blue\"\n    rows: 1\n    columns: 1\n        shortTimerInterval: 20\n        longTimerInterval: 100\n    Component.onCompleted: init()\n    // Plot etc. here\n}\n</code></pre></p> Full Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"X-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"                \n                    Line {\n                        xData: [1,2,3,4,5]\n                        yData: [1,2,3,4,5]\n                        color: \"orange\"                 \n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/figure/#properties","title":"Properties","text":""},{"location":"components/figure/#facecolor-string","title":"faceColor (String)","text":"<p>The <code>faceColor</code> Property modifies the color of the figure only. The default is <code>\"white\"</code>. Python methods:</p> Name Parameters Return Type get_facecolor() - String set_facecolor() facecolor : String None"},{"location":"components/figure/#rows-integer","title":"rows (Integer)","text":"<p>The amount of plots in one column. The Plots will fill up a row before moving into the next row. This is set only during the init phase of the figure and can't be modified later. The default is <code>1</code>.</p>"},{"location":"components/figure/#columns-integer","title":"columns (Integer)","text":"<p>The amount of plots in one row. The Plots will fill up a row before moving into the next row. This is set only during the init phase of the figure and can't be modified later. The default is <code>1</code>.</p>"},{"location":"components/figure/#shorttimerinterval-integer","title":"shortTimerInterval (Integer)","text":"<p>The Figure updates are driven by an event system. The short timer is responsible to propagate single standalone changes but is reset anytime an event is emitted to group changes in the figure together.  The provided value is the timer in milliseconds. The default is <code>20</code>.</p> <p>Python methods:</p> Name Parameters Return Type get_short_timer_interval() - Integer set_short_timer_interval() interval : Integer None"},{"location":"components/figure/#longtimerinterval-integer","title":"longTimerInterval (Integer)","text":"<p>The long timer is the maximum time between updates in the Figure. If you constantly modify the figure it will update after one cycle of this timer. The provided value is the timer in milliseconds. The default is <code>100</code>. Python methods:</p> Name Parameters Return Type get_long_timer_interval() - Integer set_long_timer_interval() interval : Integer None"},{"location":"components/figure/#coordinates","title":"coordinates(QVariantList)","text":"<p>If the property <code>refreshCoordiantes</code> is set to <code>true</code> the signal <code>coordinatesChanged</code> will be emitted. Contains a tuple of [x, y] coordinates. Read-Only. Python methods:</p> Name Parameters Return Type get_coordinates() - QVariantList"},{"location":"components/figure/#refreshcoordinatesbool","title":"refreshCoordinates(Bool)","text":"<p>The Figure will emit the signal <code>coordinatesChanged</code> if this property is set to <code>true</code>. Check the coordinates property for more information. The default is <code>false</code>. Python methods:</p> Name Parameters Return Type get_refresh_coordinates() - Bool set_refresh_coordinates() refresh: Bool None"},{"location":"components/figure/#coordinatesrefreshrateinteger","title":"coordinatesRefreshRate(Integer)","text":"<p>Defines the interval the <code>coordinatesChanged</code> signal is emitted in milliseconds. The default is <code>50</code>. Python methods:</p> Name Parameters Return Type get_coordinates_refresh_rate() - Integer set_coordinates_refresh_rate() refresh_rate: Integer None"},{"location":"components/figure/#constrainedlayoutbool","title":"constrainedLayout(Bool)","text":"<p>instantiates the figure with <code>constrainedLayout = True/False</code>. Matplotlib Constrained Layout Guide. The difference to tightLayout is that manually added objects like Colorbars (which exist on their own axes) are taken care of as well.  This is incompatibel with tightLayout.  The default is <code>true</code>. Python methods:</p> Name Parameters Return Type get_constrained_layout() - Bool set_constrained_layout() constrained_layout: Bool None"},{"location":"components/figure/#zoomrectcolorstring","title":"zoomRectColor(String)","text":"<p>The color of the zoom rectangle displayed. The default is <code>black</code>. Python methods:</p> Name Parameters Return Type get_refresh_coordinates() - Bool set_refresh_coordinates() refresh: Bool None"},{"location":"components/figure/#zoomrectwidthinteger","title":"zoomRectWidth(Integer)","text":"<p>The linewidth of the zoom rectangle. The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_refresh_coordinates() - Bool set_refresh_coordinates() refresh: Bool None"},{"location":"components/figure/#zoomrectlinestylestring","title":"zoomRectLinestyle(String)","text":"<p>Linestyle of the zoom rectangle. Supported linestyles are <code>(dashed, dotted, solid, dash-dot, dash-dot-dot)</code>. The fallback is <code>dotted</code> if an invalid linestyle is used. The default is <code>dotted</code>. Python methods:</p> Name Parameters Return Type get_refresh_coordinates() - Bool set_refresh_coordinates() refresh: Bool None"},{"location":"components/figure/#slots","title":"Slots","text":""},{"location":"components/figure/#init","title":"init()  <p>This is probably the most important Slot in the whole project. This MUST be called whenever the Figure Component is instantiated in QML do prepare the Matplotlib objects in the background.</p>","text":""},{"location":"components/figure/#tightlayout","title":"tightLayout(kwargs = {}) <p>Check out the Matplotlib Documentation for the full documentation. With this Slot the available space for the Figure can be adjusted. This is kind of analog to using a padding on any QML object (which won't work with the Figure). The kwargs dictionary must be provided as a Javascript object. Example This will add a padding of 10% to the bottom of the figure.  <pre><code>Figure {\n    faceColor: \"blue\"\n    rows: 1\n    columns: 1\n    Component.onCompleted: {\n        init()\n        tightLayout({rect : [0, 0.1, 1, 1]})\n    }\n    // Plot etc. here\n}\n</code></pre></p>","text":""},{"location":"components/figure/#subplotsadjustkwargs","title":"subplotsAdjust(kwargs = {}) <p>Thats basically a direct wrapper for (matplotlib.pyplot.subplots_adjust)[https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots_adjust.html]. Make sure you provide the keyword arguments as a JS-object.</p>","text":""},{"location":"components/figure/#home","title":"home() <p>Home button functionality of the standard matplotlib Toolbar.  Example <pre><code>import Matplotlib 1.0\n\nButton {\n        text: \"zoom\"\n        width: 100\n        height: 100\n        onClicked: {\n                fig.home()\n        }\n}\n\nFigure {\n        id: fig\n        anchors.fill: parent\n        Component.onCompleted: {\n                init()\n        }\n        // Axis and Plots here\n}\n</code></pre></p>","text":""},{"location":"components/figure/#back","title":"back() <p>Back button functionality of the standard matplotlib Toolbar. Example is analog to <code>home()</code>.</p>","text":""},{"location":"components/figure/#forward","title":"forward() <p>Forward button functionality of the standard matplotlib Toolbar. Example is analog to <code>home()</code>.</p>","text":""},{"location":"components/figure/#pan","title":"pan() <p>Pan button functionality of the standard matplotlib Toolbar. Example is analog to <code>home()</code>.</p>","text":""},{"location":"components/figure/#zoom","title":"zoom() <p>Zoom button functionality of the standard matplotlib Toolbar. Example is analog to <code>home()</code>.</p>","text":""},{"location":"components/figure/#methods","title":"Methods <p>The methods can be used inside of python scripts but not inside QML</p>","text":""},{"location":"components/figure/#get_child","title":"get_child(name) // get_object(name) <p>This can be used to retrieve a plot object that is a child of the figure by the <code>objectName</code> property it had during the init phase of the figure. This way you don't need to provide a full path to all of your plot objects in the python operator. The name parameter is not case sensitive. Note that the <code>QmlConnectorIF</code> is an interface that is solely provided in the context of working in the Analyzer4D software. Example <pre><code>qml_connector = QmlConnectorIF()\nfig = qml_connector.getObject(FIGURE_PATH)\nfoo_plot_obj = fig.get_child(\"foo\")\n</code></pre></p>","text":""},{"location":"components/figure/#get_matplotlib_figure_object","title":"get_matplotlib_figure_object <p>Returns the wrapped matplotlib figure object. This can be used to do anything, that this package does not yet provide like 3D-plots.</p> <p>Example</p> <pre><code># get the qml figure reference\nmatplotlib_figure = qml_figure.get_matplotlib_figure_object()\n</code></pre>","text":""},{"location":"components/fill_between/","title":"FillBetween","text":""},{"location":"components/fill_between/#inherits-from-polycollection","title":"Inherits from (PolyCollection)","text":"<p>A wrapper for matplotlib.Axes.fill_between.</p>"},{"location":"components/fill_between/#example","title":"Example","text":"<pre><code>FillBetween {\n    id: fb\n    x: [1,2,3,4,5]\n    y1: [2,3,4,5,6]\n    y2: [1,1,1,2,2]\n    alpha: 0.3\n    where: [true, true, false, true, true]\n    interpolate: true\n    step: \"mid\"\n    linewidth: 10\n    linestyle: \"dashed\"\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {         \n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n\n                    FillBetween {\n                        id: fb\n                        x: [1,2,3,4,5]\n                        y1: [2,3,4,5,6]\n                        y2: [1,1,1,2,2]\n                        alpha: 0.3\n                        where: [true, true, false, true, true]\n                        interpolate: true\n                        step: \"mid\"\n                        linewidth: 10\n                        linestyle: \"dashed\"\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/fill_between/#properties","title":"Properties","text":""},{"location":"components/fill_between/#x-arraylist","title":"x (Array/List)","text":"<p>The points on the x axis defining the line that wraps the colored faces of the fill_between. Note: If you are working with Numpy arrays and you want to retrieve the from the wrapper you should use the property <code>FillBetween.x</code>. The <code>get_x</code> method converts the numpy array to a python list in order to make it usable inside QML. Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x: Array/List None"},{"location":"components/fill_between/#y1-arraylist","title":"y1 (Array/List)","text":"<p>One of the y data curves (in total two can be used as boundaries for the fill_between) Note: If you are working with Numpy arrays and you want to retrieve the from the wrapper you should use the property <code>FillBetween.y1</code>. The <code>get_y1</code> method converts the numpy array to a python list in order to make it usable inside QML. Python methods:</p> Name Parameters Return Type get_y1() - Array/List set_y1() y1: Array/List None"},{"location":"components/fill_between/#y2-arraylist","title":"y2 (Array/List)","text":"<p>The second y data curve. By default this is set to zero which is equivalent to setting it to an array of all zeros which simply ends the fill_between on the x-axis. The default is <code>0</code>. Note: If you are working with Numpy arrays and you want to retrieve the from the wrapper you should use the property <code>FillBetween.y2</code>. The <code>get_y2</code> method converts the numpy array to a python list in order to make it usable inside QML. Python methods:</p> Name Parameters Return Type get_y2() - Array/List set_y2() y2: Array/List None"},{"location":"components/fill_between/#where-arraylist","title":"where (Array/List)","text":"<p>A boolean Array defining which points are being used for the fill_between. Note that single points can't have a filling. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_where() - Array/List set_where() where: Array/List None"},{"location":"components/fill_between/#interpolate-bool","title":"interpolate (Bool)","text":"<p>Check out the Matplotlib docs (link at the top). The default is <code>False</code>. Python methods:</p> Name Parameters Return Type get_interpolate() - Bool set_interpolate() interpolate: Bool None"},{"location":"components/fill_between/#step-string","title":"step (String)","text":"<p>Check out the Matplotlib docs (link at the top). The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_step() - String set_step() where: String None"},{"location":"components/hline/","title":"HLine","text":""},{"location":"components/hline/#inherits-from-line","title":"Inherits from (Line)","text":"<p>A wrapper for the Line2D coming from the axis.Axis.axvline method from Matplotlib.</p>"},{"location":"components/hline/#example","title":"Example","text":"<pre><code>HLine {\n    id: hLine\n    linewidth: 4\n    color: \"yellow\"\n    alpha: 0.5\n    xMin: 0.3\n    xMax: 0.8\n    y: 2\n}\n</code></pre> Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {         \n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n\n                    HLine {\n                        id: hLine\n                        linewidth: 4\n                        color: \"yellow\"\n                        alpha: 0.5\n                        xMin: 0.3\n                        xMax: 0.8\n                        y: 2\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/hline/#properties","title":"Properties","text":""},{"location":"components/hline/#y-float","title":"y (Float)","text":"<p>The Y-Coordinate to draw the Hline on. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_y() - Float set_y() y : Float None"},{"location":"components/hline/#xmin-float","title":"xMin (Float)","text":"<p>The value is given in percent like 0 &lt;= xMin &lt; xMax &lt; 1. The HLine will be drawn from this margin on. The default is <code>0.0</code>. Python methods:</p> Name Parameters Return Type get_xmin() - Float set_xmin() xmin : Float None"},{"location":"components/hline/#xmax-float","title":"xMax (Float)","text":"<p>The value is given in percent like 0 &lt;= xMin &lt; xMax &lt; 1. The HLine will be drawn from this margin on. The default is <code>1.0</code>. Python methods:</p> Name Parameters Return Type get_xmax() - Float set_xmax() xmax : Float None"},{"location":"components/hline/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle : String None"},{"location":"components/hline/#linewidth-integer","title":"linewidth (Integer)","text":"<p>The linewidth or thickness of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linewidth() - Integer set_linewidth() linewidth : Integer None"},{"location":"components/hline/#color-string","title":"color (String)","text":"<p>Color of the line object. You can use the colors from the Matplotlib documentation. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/hline/#marker-string","title":"marker (String)","text":"<p>The appearance of the markers. Matplotlib has a list with all available markers. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_marker() - String set_marker() marker : String None"},{"location":"components/hline/#markersize-float","title":"markerSize (Float)","text":"<p>A list containing the sizes for each individual object in the collection. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_markersize() - Float set_markersize() markerSize : Float None"},{"location":"components/hline/#markeredgewidth","title":"markerEdgeWidth (Float)","text":"<p>Markers can have a border which can be colored differently to the face of the marker. This property adjusts the thickness of the border of a marker. The default is <code>20</code>.  Python methods:</p> Name Parameters Return Type get_markeredgewidth() - Float set_markeredgewidth() markerEdgeWidth : Float None"},{"location":"components/hline/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>The color of the border of the markers. Note that a markerEdgeWidth must be set in order for this to be visible. The default is the facecolor of the marker.  Python methods:</p> Name Parameters Return Type get_markeredgecolor() - String set_markeredgecolor() markerEdgeColor : String None"},{"location":"components/hline/#markerfacecoloralt-string","title":"markerFaceColorAlt (String)","text":"<p>If a fillstyle other than <code>full</code> is set then this is the second color the face of the marker is filled with. By default this is the same as the facecolor. Python methods:</p> Name Parameters Return Type get_markerfacecoloralt() - String set_markerfacecoloralt() markerFaceColorAlt : String None"},{"location":"components/hline/#fillstyle","title":"fillstyle (String)","text":"<p>How to fill the face of the marker. Can be one of <code>{'full', 'left', 'right', 'bottom', 'top', 'none'}</code>. The default is <code>None</code> which is the same as <code>full</code>. Python methods:</p> Name Parameters Return Type get_fillstyle() - String set_fillstyle() fillstyle: String None"},{"location":"components/hline/#antialiased-bool","title":"antialiased (Bool)","text":"<p>Whether to apply antialiasing on the Line. The default is <code>None</code> which is the same as <code>None</code>. Python methods:</p> Name Parameters Return Type get_antialiased() - Bool set_antialiased() antialiased: Bool None"},{"location":"components/hline/#dashcapstyle-string","title":"dashCapstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'miter', 'round', 'bevel'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_capstyle() - String set_dash_capstyle() dashCapstyle : String None"},{"location":"components/hline/#solidcapstyle-string","title":"solidCapstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_capstyle() - String set_solid_capstyle() solidCapstyle : String None"},{"location":"components/hline/#dashjoinstyle-string","title":"dashJoinstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_joinstyle() - String set_dash_joinstyle() dashJoinstyle : String None"},{"location":"components/hline/#solidjoinstyle-string","title":"solidJoinstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_joinstyle() - String set_solid_joinstyle() solidJoinstyle : String None"},{"location":"components/hline/#drawstyle-string","title":"drawstyle (String)","text":"<p>The Line can be drawn with different style settings. For example does the <code>steps</code> drawstyle draw steps (90\u00b0 angles) between two data points whereas the <code>default</code> drawstyle interpolate the data points with a straight line. Can be one of <code>{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}</code>. The default is <code>default</code>. Python methods:</p> Name Parameters Return Type get_drawstyle() - String set_drawstyle() drawstyle : String None"},{"location":"components/hline/#markevery-integer","title":"markevery (Integer)","text":"<p>When a marker is defined mark every x data point with a marker. The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_markevery() - Integer set_markevery() markevery : Integer None"},{"location":"components/hline/#xdata-arraylist","title":"xData (Array/List)","text":"<p>Marks the points on the X-Axis that are related to the points of the same index in the Array in <code>yData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_xdata()</code> is used by the interface. If you want to retrieve the numpy array you did put in use the property <code>xdata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type xdata(property not method!) - Array/List set_xdata() xdata : Array/List None"},{"location":"components/hline/#ydata-arraylist","title":"yData (Array/List)","text":"<p>Marks the points on the Y-Axis that are related to the points of the same index in the Array in <code>xData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_ydata()</code> is used by the interface.If you want to retrieve the numpy array you did put in use the property <code>ydata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type ydata(property not method!) - Array/List set_ydata() xdata : Array/List None"},{"location":"components/hspan/","title":"HSpan","text":""},{"location":"components/hspan/#inherits-from-polygon","title":"Inherits from (Polygon)","text":"<p>Wrapper for Matplotlib.axes.Axes.axhspan</p>"},{"location":"components/hspan/#example","title":"Example","text":"<pre><code>HSpan {\n    id: hspan\n    yMin: 1\n    yMax: 3\n    xMin: 0.2\n    xMax: 0.8\n    label: \"SPANNY\"\n    alpha: 0.5\n    facecolor: \"orange\"\n    edgecolor: \"white\"\n    linewidth: 4\n    linestyle: \"dashed\"\n    fill: true\n    hatch: \"/\"\n    closed: false\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    HSpan {\n                        id: hspan\n                        yMin: 1\n                        yMax: 3\n                        xMin: 0.2\n                        xMax: 0.8\n                        label: \"SPANNY\"\n                        alpha: 0.5\n                        facecolor: \"orange\"\n                        edgecolor: \"white\"\n                        linewidth: 4\n                        linestyle: \"dashed\"\n                        fill: true\n                        hatch: \"/\"\n                        closed: false\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/hspan/#properties","title":"Properties","text":""},{"location":"components/hspan/#ymin-float","title":"yMin (Float)","text":"<p>The position of the lower border line of the span on the y-axis.The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_ymin() - Float set_ymin() yMin : Float None"},{"location":"components/hspan/#ymax-float","title":"yMax (Float)","text":"<p>The position of the upper border line of the span on the y-axis.The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_ymax() - Float set_ymax() yMax : Float None"},{"location":"components/hspan/#xmin-float","title":"xMin (Float)","text":"<p>Defines the position of the left side of the span object on the x-axis as a ratio of the x-axis. Thus the value needs to be 0 &lt;= xMin &lt; xMax &lt;= 1.The default is <code>0.0</code>. Python methods:</p> Name Parameters Return Type get_xmin() - Float set_xmin() xMin : Float None"},{"location":"components/hspan/#xmax-float","title":"xMax (Float)","text":"<p>Defines the position of the right side of the span object on the x-axis as a ratio of the x-axis. Thus the value needs to be 0 &lt;= xMin &lt; xMax &lt;= 1.The default is <code>1.0</code>. Python methods:</p> Name Parameters Return Type get_xmax() - Float set_xmax() xMax : Float None"},{"location":"components/hspan/#closed-bool","title":"closed (Bool)","text":"<p>Wether the Polygon is closed. This usually results in the border line being open since no close vertice is created.The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_closed() - Bool set_closed() closed  : Bool None"},{"location":"components/imshow/","title":"Imshow","text":""},{"location":"components/imshow/#inherits-from-axesimage","title":"Inherits from (AxesImage)","text":"<p>A wrapper for the matplotlib.axis.Axis.imshow object.</p> Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n\n    ColumnLayout {\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"X-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"                \n                    Imshow {\n                        x: [[1,2,3], [2,3,4]]\n                        cMap: \"gist_rainbow\"\n                        aspect: \"auto\"\n                        extent: [0, 3, 0, 4]\n                        colorbar: Colorbar {\n                            tickColor: \"white\"\n                            tickLabelColor: \"white\"\n                        }                       \n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/imshow/#properties","title":"Properties","text":""},{"location":"components/imshow/#aspect-string","title":"aspect (String)","text":"<p>The default is <code>\"equal\"</code>. Python methods:</p> Name Parameters Return Type get_aspect() - String set_aspect() aspect : String None"},{"location":"components/imshow/#extent-listtuple","title":"extent (List/Tuple)","text":"<p>Describes the bounding box the data is stretched to fill the image. The behaviour is similar to using the <code>xMin</code>, <code>xMax</code>, <code>yMin</code>, <code>yMax</code> properties on the Axis but this won't stretch the image to the desired coordinates. The List or Tuple typically looks like this: <pre><code>extent: [x_min, x_max, y_min, y_max]\n</code></pre> Note that you can only use tuples over the python interface and not in QML. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_extent() - List/Tuple set_extent() extent : List/Tuple None"},{"location":"components/imshow/#x-arraylist","title":"x (Array/List)","text":"<p>summary.The default is <code>[]</code>. Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x : Array/List None"},{"location":"components/imshow/#interpolation-string","title":"interpolation (String)","text":"<p>The default is <code>antialiased</code>. Python methods:</p> Name Parameters Return Type get_interpolation() - String set_interpolation() interpolation : String None"},{"location":"components/imshow/#origin-string","title":"origin (String)","text":"<p>The default is <code>lower</code>. Python methods:</p> Name Parameters Return Type get_origin() - String set_origin() origin : String None"},{"location":"components/imshow/#resample-bool","title":"resample (Bool)","text":"<p>The default is <code>False</code>. Python methods:</p> Name Parameters Return Type get_resample() - Bool set_resample() resample : Bool None"},{"location":"components/imshow/#filternorm-bool","title":"filternorm (Bool)","text":"<p>The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Bool set_filternorm() filternorm: Bool None"},{"location":"components/imshow/#filterrad-float","title":"filterrad (Float)","text":"<p>The default is <code>4.0</code>. Python methods:</p> Name Parameters Return Type get_filternorm() - Float set_filternorm() filterrad : Float None"},{"location":"components/imshow/#visible-bool","title":"visible (Bool)","text":"<p>Whether the object is drawn on the Axes or not The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_visible() - Bool set_visible() visible : Bool None"},{"location":"components/imshow/#alpha-float","title":"alpha (Float)","text":"<p>The opacity/transparency value of the Artist, This must be a value between 0 and 1. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha : Float None"},{"location":"components/imshow/#labelstring","title":"label(String)","text":"<p>The label displayed in the legend of the plot. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"components/imshow/#zorderinteger","title":"zOrder(Integer)","text":"<p>Position on the z-axis of the Artist in the drawing hierarchy. Higher means further in the front. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_zorder() - Integer set_zorder() label : Integer None"},{"location":"components/imshow/#cmap-string","title":"cMap (String)","text":"<p>The colormap of the ScalarMappable. Can b one of the Matplotlib Colormaps. The default is <code>viridis</code>. Python methods:</p> Name Parameters Return Type get_cmap() - String set_cmap() x : String None"},{"location":"components/imshow/#vmin-float","title":"vMin (Float)","text":"<p>The minimum value of of the colorscale for the colormap. By default the minimum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmin() - String set_vmin() x : String None"},{"location":"components/imshow/#vmax-float","title":"vMax (Float)","text":"<p>The maximum value of of the colorscale for the colormap. By default the maximum of the data is used. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_vmax() - String set_vmax() x : String None"},{"location":"components/imshow/#colorbar-colorbar","title":"colorbar (Colorbar)","text":"<p>A Colorbar Component. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colorbar() - Colorbar set_colorbar() colorbar : Colorbar None"},{"location":"components/line/","title":"Line","text":""},{"location":"components/line/#inherits-from-artist","title":"Inherits from (Artist)","text":"<p>Wrapper for the Line2D object in Matplotlib.</p>"},{"location":"components/line/#example","title":"Example","text":"<pre><code>Line {\n    id: line\n    xData: [1,2,3,4,5]\n    yData: [1,2,3,4,5]\n    markevery: 2\n    drawstyle: \"steps-pre\"\n    solidJoinstyle: \"round\"\n    dashJoinstyle: \"bevel\"\n    solidCapstyle: \"projecting\"\n    dashCapstyle: \"projecting\"\n    antialiased: true\n    fillstyle: \"right\"\n    markerfacecoloralt: \"blue\"\n    markersize: 20\n    marker: \"o\"\n    markerfacecolor: \"orange\"\n    markeredgecolor: \"green\"\n    markeredgewidth: 5\n    color: \"pink\"\n    linestyle: \"dashed\"\n    linewidth: 5\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    Line {\n                        id: line\n                        xData: [1,2,3,4,5]\n                        yData: [1,2,3,4,5]\n                        markevery: 2\n                        drawstyle: \"steps-pre\"\n                        solidJoinstyle: \"round\"\n                        dashJoinstyle: \"bevel\"\n                        solidCapstyle: \"projecting\"\n                        dashCapstyle: \"projecting\"\n                        antialiased: true\n                        fillstyle: \"right\"\n                        markerfacecoloralt: \"blue\"\n                        markersize: 20\n                        marker: \"o\"\n                        markerfacecolor: \"orange\"\n                        markeredgecolor: \"green\"\n                        markeredgewidth: 5\n                        color: \"pink\"\n                        linestyle: \"dashed\"\n                        linewidth: 5\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/line/#properties","title":"Properties","text":""},{"location":"components/line/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle : String None"},{"location":"components/line/#linewidth-integer","title":"linewidth (Integer)","text":"<p>The linewidth or thickness of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linewidth() - Integer set_linewidth() linewidth : Integer None"},{"location":"components/line/#color-string","title":"color (String)","text":"<p>Color of the line object. You can use the colors from the Matplotlib documentation. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/line/#marker-string","title":"marker (String)","text":"<p>The appearance of the markers. Matplotlib has a list with all available markers. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_marker() - String set_marker() marker : String None"},{"location":"components/line/#markersize-float","title":"markerSize (Float)","text":"<p>A list containing the sizes for each individual object in the collection. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_markersize() - Float set_markersize() markerSize : Float None"},{"location":"components/line/#markeredgewidth","title":"markerEdgeWidth (Float)","text":"<p>Markers can have a border which can be colored differently to the face of the marker. This property adjusts the thickness of the border of a marker. The default is <code>20</code>.  Python methods:</p> Name Parameters Return Type get_markeredgewidth() - Float set_markeredgewidth() markerEdgeWidth : Float None"},{"location":"components/line/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>The color of the border of the markers. Note that a markerEdgeWidth must be set in order for this to be visible. The default is the facecolor of the marker.  Python methods:</p> Name Parameters Return Type get_markeredgecolor() - String set_markeredgecolor() markerEdgeColor : String None"},{"location":"components/line/#markerfacecoloralt-string","title":"markerFaceColorAlt (String)","text":"<p>If a fillstyle other than <code>full</code> is set then this is the second color the face of the marker is filled with. By default this is the same as the facecolor. Python methods:</p> Name Parameters Return Type get_markerfacecoloralt() - String set_markerfacecoloralt() markerFaceColorAlt : String None"},{"location":"components/line/#fillstyle","title":"fillstyle (String)","text":"<p>How to fill the face of the marker. Can be one of <code>{'full', 'left', 'right', 'bottom', 'top', 'none'}</code>. The default is <code>None</code> which is the same as <code>full</code>. Python methods:</p> Name Parameters Return Type get_fillstyle() - String set_fillstyle() fillstyle: String None"},{"location":"components/line/#antialiased-bool","title":"antialiased (Bool)","text":"<p>Whether to apply antialiasing on the Line. The default is <code>None</code> which is the same as <code>None</code>. Python methods:</p> Name Parameters Return Type get_antialiased() - Bool set_antialiased() antialiased: Bool None"},{"location":"components/line/#dashcapstyle-string","title":"dashCapstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'miter', 'round', 'bevel'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_capstyle() - String set_dash_capstyle() dashCapstyle : String None"},{"location":"components/line/#solidcapstyle-string","title":"solidCapstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_capstyle() - String set_solid_capstyle() solidCapstyle : String None"},{"location":"components/line/#dashjoinstyle-string","title":"dashJoinstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_joinstyle() - String set_dash_joinstyle() dashJoinstyle : String None"},{"location":"components/line/#solidjoinstyle-string","title":"solidJoinstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_joinstyle() - String set_solid_joinstyle() solidJoinstyle : String None"},{"location":"components/line/#drawstyle-string","title":"drawstyle (String)","text":"<p>The Line can be drawn with different style settings. For example does the <code>steps</code> drawstyle draw steps (90\u00b0 angles) between two data points whereas the <code>default</code> drawstyle interpolate the data points with a straight line. Can be one of <code>{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}</code>. The default is <code>default</code>. Python methods:</p> Name Parameters Return Type get_drawstyle() - String set_drawstyle() drawstyle : String None"},{"location":"components/line/#markevery-integer","title":"markevery (Integer)","text":"<p>When a marker is defined mark every x data point with a marker. The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_markevery() - Integer set_markevery() markevery : Integer None"},{"location":"components/line/#xdata-arraylist","title":"xData (Array/List)","text":"<p>Marks the points on the X-Axis that are related to the points of the same index in the Array in <code>yData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_xdata()</code> is used by the interface. If you want to retrieve the numpy array you did put in use the property <code>xdata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type xdata(property not method!) - Array/List set_xdata() xdata : Array/List None"},{"location":"components/line/#ydata-arraylist","title":"yData (Array/List)","text":"<p>Marks the points on the Y-Axis that are related to the points of the same index in the Array in <code>xData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_ydata()</code> is used by the interface.If you want to retrieve the numpy array you did put in use the property <code>ydata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type ydata(property not method!) - Array/List set_ydata() xdata : Array/List None"},{"location":"components/plot/","title":"Plot","text":""},{"location":"components/plot/#example-usage","title":"Example usage","text":"<p>The Plot is a child of the <code>Figure</code> and defines a subplot. The amount of Subplots is defined in the <code>rows</code> and <code>columns</code> Propertys of the <code>Figure</code>. <pre><code>Figure {\n    faceColor: \"blue\"\n    rows: 2\n    columns: 1\n    Component.onCompleted: init()\n    Plot {\n        faceColor: \"red\"\n        // Axis etc. here\n    }\n    Plot {\n        faceColor: \"green\"\n        // Axis etc. here\n    }\n}\n</code></pre></p>"},{"location":"components/plot/#properties","title":"Properties","text":""},{"location":"components/plot/#facecolor-string","title":"faceColor (String)","text":"<p>The color of the face of each subplot in a figure (there might only be one plot on the figure). The default is <code>\"white\"</code>. Python methods:</p> Name Parameters Return Type get_facecolor() - Integer set_facecolor() interval : Integer None"},{"location":"components/scatter/","title":"Scatter","text":""},{"location":"components/scatter/#inherits-from-line2d","title":"Inherits from Line2D","text":"<p>The Scatter QML Type is implemented as a <code>matplotlib.Line2D</code> object without a line-style to achieve better performance during plot updates. Scatters are by default a PathCollection which makes it hard to update them efficiently. Thus it is not possible to provide different markerSizes (Array-Like). If you want to have that functionality, use the ScatterCollection.</p>"},{"location":"components/scatter/#properties","title":"Properties","text":""},{"location":"components/scatter/#label-string","title":"label (String)","text":"<p>The label of the scatter object, if there are no labels on an axis, the legend won't be displayed. Python methods:</p> Name Parameters Return Type get_label() - String set_label() label : String None"},{"location":"components/scatter/#color-string","title":"color (String)","text":"<p>Color of the scatter object. You can use the colors from the Matplotlib documentation. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/scatter/#xdata-arraylist","title":"xData (Array/List)","text":"<p>Marks the points on the X-Axis that are related to the points of the same index in the Array in <code>yData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_xdata()</code> is used by the interface. If you want to retrieve the original numpy array you put in, use the property <code>xdata</code>. Python methods:</p> Name Parameters Return Type xdata(property not method!) - Array/List set_xdata() xdata : Array/List None"},{"location":"components/scatter/#ydata-arraylist","title":"yData (Array/List)","text":"<p>Marks the points on the Y-Axis that are related to the points of the same index in the Array in <code>xData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_ydata()</code> is used by the interface. If you want to retrieve the original numpy array you put in, use the property <code>ydata</code>. Python methods:</p> Name Parameters Return Type ydata(property not method!) - Array/List set_ydata() xdata : Array/List None"},{"location":"components/scatter/#alpha-float","title":"alpha (Float)","text":"<p>The transparency of the scatter points on the plot. 0.0 is transparent and 1.0 is fully visible. Python methods:</p> Name Parameters Return Type get_alpha() - Float set_alpha() alpha : Float None"},{"location":"components/scatter/#marker-string","title":"marker (String)","text":"<p>The marker Property defines the appearance of the Scatter markers. Check out the Matplotlib-markers documentation for the available markers. The transparency of the line on the plot. 0.0 is transparent and 1.0 is fully visible. The default is <code>\"o\"</code>. Python methods:</p> Name Parameters Return Type get_marker() - String set_marker() marker : String None"},{"location":"components/scatter/#markersize-float","title":"markerSize (Float)","text":"<p>Sets the size of all of the markers in that object. The default is <code>None</code> which means it falls back to mthe matplotlib default. Python methods:</p> Name Parameters Return Type get_markersize() - Float set_markersize() markersize : Float None"},{"location":"components/scatter/#markeredgewidth-float","title":"markerEdgeWidth (float)","text":"<p>Modifies the outer border thickness of the markers.  The default is <code>None</code> which means it falls back to mthe matplotlib default. Python methods:</p> Name Parameters Return Type get_markeredgewidth() - Float set_markeredgewidth() width : Float None"},{"location":"components/scatter/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>Sets the color of the marker borders. The default is <code>None</code> which means it falls back to mthe matplotlib default. Python methods:</p> Name Parameters Return Type get_markeredgecolor() - String set_markeredgecolor() color : String None"},{"location":"components/scatter/#markerfacecolor-string","title":"markerFaceColor (String)","text":"<p>Sets the color of the marker face. The default is <code>None</code> which means it falls back to mthe matplotlib default. Python methods:</p> Name Parameters Return Type get_markerfacecolor() - String set_markerfacecolor() color : String None"},{"location":"components/scatter_collection/","title":"ScatterCollection","text":""},{"location":"components/scatter_collection/#inherits-from-_collectionwithsizes","title":"Inherits from (_CollectionWithSizes)","text":"<p>Wrapper for Matplotlib.axes.Axes.scatter</p>"},{"location":"components/scatter_collection/#example","title":"Example","text":"<pre><code>ScatterCollection {\n    id: scatter\n    x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    y: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    c: [0.8998370014572835,\n        0.8750622093628359,\n        0.8713111949062655,\n        0.25608204487581177,\n        0.8322755484767956,\n        0.807821917451281,\n        0.9982243249422079,\n        0.5387948606026356,\n        0.7295445526316554,\n        0.15979204475288822\n        ]   \n        markerEdgeColors: [\"red\", \"green\", \"red\", \"blue\", \"red\", \"green\", \"red\", \"green\", \"green\", \"green\"]     \n        marker: \"H\"\n        linewidth: 5                    \n        colorbar: Colorbar {\n\n        }\n        cMap: \"jet\"\n        vMin: -1\n        vMax: 1\n        hatch: \"/\"\n        onXChanged: console.log(\"X CHANGED\")\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {         \n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n\n                    ScatterCollection {\n                        id: scatter\n                        x: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n                        y: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n                        c: [0.8998370014572835,\n                            0.8750622093628359,\n                            0.8713111949062655,\n                            0.25608204487581177,\n                            0.8322755484767956,\n                            0.807821917451281,\n                            0.9982243249422079,\n                            0.5387948606026356,\n                            0.7295445526316554,\n                            0.15979204475288822\n                        ]   \n                        markerEdgeColors: [\"red\", \"green\", \"red\", \"blue\", \"red\", \"green\", \"red\", \"green\", \"green\", \"green\"]     \n                        marker: \"H\"\n                        linewidth: 5                    \n                        colorbar: Colorbar {\n\n                        }\n                        cMap: \"jet\"\n                        vMin: -1\n                        vMax: 1\n                        hatch: \"/\"\n                        onXChanged: console.log(\"X CHANGED\")\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/scatter_collection/#properties","title":"Properties","text":""},{"location":"components/scatter_collection/#x-arraylist","title":"x (Array/List)","text":"<p>The positions of the markers on the x-axis. Python methods:</p> Name Parameters Return Type get_x() - Array/List set_x() x : Array/List None"},{"location":"components/scatter_collection/#y-arraylist","title":"y (Array/List)","text":"<p>The positions of the markers on the y-axis. Python methods:</p> Name Parameters Return Type get_y() - Array/List set_y() y : Array/List None"},{"location":"components/scatter_collection/#marker-string","title":"marker (String)","text":"<p>The appearance of the markers. Matplotlib has a list with all available markers. The default is <code>o</code>. Python methods:</p> Name Parameters Return Type get_marker() - String set_marker() marker : String None"},{"location":"components/scatter_collection/#markersizes-arraylist","title":"markerSizes (Array/List)","text":"<p>A list containing the sizes for each individual object in the collection The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_sizes() - Array/List set_sizes() markerSizes : Array/List None"},{"location":"components/scatter_collection/#markersize-float","title":"markerSize (Float)","text":"<p>A list containing the sizes for each individual object in the collection The default is <code>20</code>. Python methods:</p> Name Parameters Return Type get_size() - Float set_size() markerSize : Float None"},{"location":"components/scatter_collection/#colors-arraylist","title":"colors (Array/List)","text":"<p>A list of values describing the colors in a colormap for each element of the collection. This property is prioritized over color The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_colors() - Array/List set_colors() colors : Array/List None"},{"location":"components/scatter_collection/#color-string","title":"color (String)","text":"<p>A string with the color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/scatter_collection/#markeredgecolors-arraylist","title":"markerEdgeColors (Array/List)","text":"<p>A list of values describing the border colors in a colormap for each element of the collection. This property is prioritized over markerEdgeColor The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolors() - Array/List set_edgecolors() markerEdgeColors: Array/List None"},{"location":"components/scatter_collection/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>A string with the border color for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_edgecolor() - String set_edgecolor() markerEdgeColor: String None"},{"location":"components/scatter_collection/#linewidths-arraylist","title":"linewidths (Array/List)","text":"<p>A list of values thickness of the line stroke for each element of the collection. This property is prioritized over linewidth The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidths() - Array/List set_linewidths() linewidths: Array/List None"},{"location":"components/scatter_collection/#linewidth-float","title":"linewidth (Float)","text":"<p>A float value with the line stroke thickness for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linewidth() - Float set_linewidth() linewidth: Float None"},{"location":"components/scatter_collection/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle: String None"},{"location":"components/scatter_collection/#hatch-string","title":"hatch (String)","text":"<p>The hatch pattern for all of the collection objects. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_hatch() - String set_hatch() hatch: String None"},{"location":"components/vline/","title":"VLine","text":""},{"location":"components/vline/#inherits-from-line","title":"Inherits from (Line)","text":""},{"location":"components/vline/#example","title":"Example","text":"<pre><code>VLine {\n    id: hLine\n    linewidth: 4\n    label: \"SOLID\"\n    color: \"yellow\"\n    alpha: 0.5\n    yMin: 0.3\n    yMax: 0.8\n    x: 2\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {         \n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    xMin: 0\n                    xMax: 10\n                    yMin: 0\n                    yMax: 10\n                    autoscale: \"\"\n\n                    VLine {\n                        id: hLine\n                        linewidth: 4\n                        label: \"SOLID\"\n                        color: \"yellow\"\n                        alpha: 0.5\n                        yMin: 0.3\n                        yMax: 0.8\n                        x: 2\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/vline/#properties","title":"Properties","text":""},{"location":"components/vline/#x-float","title":"x (Float)","text":"<p>The Y-Coordinate to draw the Hline on. The default is <code>0</code>. Python methods: | Name                      | Parameters            | Return Type   | | ------------------------- |:---------------------:|---------------| |get_x()                    | -                     | Float         | |set_x()                    | x : Float             | None          |</p>"},{"location":"components/vline/#ymin-float","title":"yMin (Float)","text":"<p>The value is given in percent like 0 &lt;= yMin &lt; yMax &lt; 1. The HLine will be drawn from this margin on. The default is <code>0.0</code>. Python methods: | Name                      | Parameters            | Return Type   | | ------------------------- |:---------------------:|---------------| |get_ymin()                 | -                     | Float         | |set_ymin()                 | ymin : Float          | None          |</p>"},{"location":"components/vline/#ymax-float","title":"yMax (Float)","text":"<p>The value is given in percent like 0 &lt;= yMin &lt; yMax &lt; 1. The VLine will be drawn from this margin on. The default is <code>1.0</code>. Python methods: | Name                      | Parameters            | Return Type   | | ------------------------- |:---------------------:|---------------| |get_ymax()                 | -                     | Float         | |set_ymax()                 | ymax : Float          | None          |</p>"},{"location":"components/vline/#linestyle-string","title":"linestyle (String)","text":"<p>The linestyle of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linestyle() - String set_linestyle() linestyle : String None"},{"location":"components/vline/#linewidth-integer","title":"linewidth (Integer)","text":"<p>The linewidth or thickness of the line object. You can call abbreviations as stated in the matplotlib documentation or \"dashed\", \"dotted\", etc.. Python methods:</p> Name Parameters Return Type get_linewidth() - Integer set_linewidth() linewidth : Integer None"},{"location":"components/vline/#color-string","title":"color (String)","text":"<p>Color of the line object. You can use the colors from the Matplotlib documentation. Python methods:</p> Name Parameters Return Type get_color() - String set_color() color : String None"},{"location":"components/vline/#marker-string","title":"marker (String)","text":"<p>The appearance of the markers. Matplotlib has a list with all available markers. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_marker() - String set_marker() marker : String None"},{"location":"components/vline/#markersize-float","title":"markerSize (Float)","text":"<p>A list containing the sizes for each individual object in the collection. The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_markersize() - Float set_markersize() markerSize : Float None"},{"location":"components/vline/#markeredgewidth","title":"markerEdgeWidth (Float)","text":"<p>Markers can have a border which can be colored differently to the face of the marker. This property adjusts the thickness of the border of a marker. The default is <code>20</code>.  Python methods:</p> Name Parameters Return Type get_markeredgewidth() - Float set_markeredgewidth() markerEdgeWidth : Float None"},{"location":"components/vline/#markeredgecolor-string","title":"markerEdgeColor (String)","text":"<p>The color of the border of the markers. Note that a markerEdgeWidth must be set in order for this to be visible. The default is the facecolor of the marker.  Python methods:</p> Name Parameters Return Type get_markeredgecolor() - String set_markeredgecolor() markerEdgeColor : String None"},{"location":"components/vline/#markerfacecoloralt-string","title":"markerFaceColorAlt (String)","text":"<p>If a fillstyle other than <code>full</code> is set then this is the second color the face of the marker is filled with. By default this is the same as the facecolor. Python methods:</p> Name Parameters Return Type get_markerfacecoloralt() - String set_markerfacecoloralt() markerFaceColorAlt : String None"},{"location":"components/vline/#fillstyle","title":"fillstyle (String)","text":"<p>How to fill the face of the marker. Can be one of <code>{'full', 'left', 'right', 'bottom', 'top', 'none'}</code>. The default is <code>None</code> which is the same as <code>full</code>. Python methods:</p> Name Parameters Return Type get_fillstyle() - String set_fillstyle() fillstyle: String None"},{"location":"components/vline/#antialiased-bool","title":"antialiased (Bool)","text":"<p>Whether to apply antialiasing on the Line. The default is <code>None</code> which is the same as <code>None</code>. Python methods:</p> Name Parameters Return Type get_antialiased() - Bool set_antialiased() antialiased: Bool None"},{"location":"components/vline/#dashcapstyle-string","title":"dashCapstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'miter', 'round', 'bevel'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_capstyle() - String set_dash_capstyle() dashCapstyle : String None"},{"location":"components/vline/#solidcapstyle-string","title":"solidCapstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_capstyle() - String set_solid_capstyle() solidCapstyle : String None"},{"location":"components/vline/#dashjoinstyle-string","title":"dashJoinstyle (String)","text":"<p>How the corners of a dashed Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_dash_joinstyle() - String set_dash_joinstyle() dashJoinstyle : String None"},{"location":"components/vline/#solidjoinstyle-string","title":"solidJoinstyle (String)","text":"<p>How the corners of a solid Line look. Can be one of <code>{'butt', 'projecting', 'round'}</code>. The default is <code>None</code>. Python methods:</p> Name Parameters Return Type get_solid_joinstyle() - String set_solid_joinstyle() solidJoinstyle : String None"},{"location":"components/vline/#drawstyle-string","title":"drawstyle (String)","text":"<p>The Line can be drawn with different style settings. For example does the <code>steps</code> drawstyle draw steps (90\u00b0 angles) between two data points whereas the <code>default</code> drawstyle interpolate the data points with a straight line. Can be one of <code>{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}</code>. The default is <code>default</code>. Python methods:</p> Name Parameters Return Type get_drawstyle() - String set_drawstyle() drawstyle : String None"},{"location":"components/vline/#markevery-integer","title":"markevery (Integer)","text":"<p>When a marker is defined mark every x data point with a marker. The default is <code>1</code>. Python methods:</p> Name Parameters Return Type get_markevery() - Integer set_markevery() markevery : Integer None"},{"location":"components/vline/#xdata-arraylist","title":"xData (Array/List)","text":"<p>Marks the points on the X-Axis that are related to the points of the same index in the Array in <code>yData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_xdata()</code> is used by the interface. If you want to retrieve the numpy array you did put in use the property <code>xdata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type xdata(property not method!) - Array/List set_xdata() xdata : Array/List None"},{"location":"components/vline/#ydata-arraylist","title":"yData (Array/List)","text":"<p>Marks the points on the Y-Axis that are related to the points of the same index in the Array in <code>xData</code>. If <code>xData</code> and <code>yData</code> have different shapes or length there won't be an error if you set that in QML but there will be an error if you set it in Python. Make sure to update them right after another.  In Python you can use numpy arrays but since QML can't interpret those they will be converted to a list whenever <code>get_ydata()</code> is used by the interface.If you want to retrieve the numpy array you did put in use the property <code>ydata</code> for retrieving it. Python property/method:</p> Name Parameters Return Type ydata(property not method!) - Array/List set_ydata() xdata : Array/List None"},{"location":"components/vspan/","title":"VSpan","text":""},{"location":"components/vspan/#inherits-from-polygon","title":"Inherits from (Polygon)","text":"<p>Wrapper for Matplotlib.axes.Axes.axhspan</p>"},{"location":"components/vspan/#example","title":"Example","text":"<pre><code>VSpan {\n    id: vspan\n    xMin: 1\n    xMax: 3\n    yMin: 0.2\n    yMax: 0.8\n    label: \"SPANNY\"\n    alpha: 0.5\n    facecolor: \"orange\"\n    edgecolor: \"white\"\n    linewidth: 4\n    linestyle: \"dashed\"\n    fill: true\n    hatch: \"/\"\n    closed: false\n}\n</code></pre> Extended Example <pre><code>import QtQuick 2.0\nimport QtQuick.Window 2.0\nimport QtQuick.Controls 2.0\nimport QtQuick.Layouts 1.15\n\nimport Matplotlib 1.0\n\nWindow {\n    id: root\n    objectName: \"root\"\n    width: 1500\n    height: 800\n    visible: true\n    title: \"Hello Python World!\"\n    ColumnLayout {\n        objectName: \"rootLayout\"\n        anchors.fill: parent\n        RowLayout {\n            Button {\n                text: \"HOME\"\n                onClicked: {\n                    figure.home()\n                }\n            }\n            Button {\n                text: \"BACK\"\n                onClicked: {\n                    figure.back()\n                }\n            }\n            Button {\n                text: \"FORWARD\"\n                onClicked: {\n                    figure.forward()\n                }\n            }\n            Button {\n                text: \"PAN\"\n                onClicked: {\n                    figure.pan()\n                }\n            }\n            Button {\n                text: \"ZOOM\"\n                onClicked: {\n                    figure.zoom()\n                }\n            }\n            Text {\n                text: \"(\" + figure.coordinates[0].toString() + \", \" + figure.coordinates[1].toString() + \")\"\n            }           \n        }\n        Figure {\n            id: figure\n            objectName: \"figure\"\n            Layout.fillWidth: true\n            Layout.fillHeight: true\n            refreshCoordinates: true\n            coordinatesRefreshRate: 1000\n            faceColor: \"#293133\"\n            Component.onCompleted: init()\n\n            Plot {\n                faceColor: \"#293133\"\n                Axis {\n                    grid: true\n                    gridAlpha: 0.7\n                    gridLinestyle: \"dashed\"\n                    xAxisLabel: \"X-Axis\"\n                    xAxisLabelFontSize: 15\n                    xAxisTickColor: \"white\"\n                    xAxisLabelColor: \"white\"\n                    yAxisLabel: \"Y-Axis\"\n                    yAxisLabelFontSize: 15\n                    yAxisTickColor: \"white\"\n                    yAxisLabelColor: \"white\"\n                    VSpan {\n                        id: vspan\n                        xMin: 1\n                        xMax: 3\n                        yMin: 0.2\n                        yMax: 0.8\n                        label: \"SPANNY\"\n                        alpha: 0.5\n                        facecolor: \"orange\"\n                        edgecolor: \"white\"\n                        linewidth: 4\n                        linestyle: \"dashed\"\n                        fill: true\n                        hatch: \"/\"\n                        closed: false\n                    }\n                }\n            }\n        }\n    }   \n}\n</code></pre>"},{"location":"components/vspan/#properties","title":"Properties","text":""},{"location":"components/vspan/#ymin-float","title":"yMin (Float)","text":"<p>Defines the position of the bottom side of the span object on the x-axis as a ratio of the x-axis. Thus the value needs to be 0 &lt;= yMin &lt; yMax &lt;= 1.The default is <code>0.0</code>. Python methods:</p> Name Parameters Return Type get_ymin() - Float set_ymin() yMin : Float None"},{"location":"components/vspan/#ymax-float","title":"yMax (Float)","text":"<p>Defines the position of the upper side of the span object on the x-axis as a ratio of the x-axis. Thus the value needs to be 0 &lt;= yMin &lt; yMax &lt;= 1.The default is <code>1.0</code>. Python methods:</p> Name Parameters Return Type get_ymax() - Float set_ymax() yMax : Float None"},{"location":"components/vspan/#xmin-float","title":"xMin (Float)","text":"<p>The position of the left border line of the span on the y-axis.The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_xmin() - Float set_xmin() xMin : Float None"},{"location":"components/vspan/#xmax-float","title":"xMax (Float)","text":"<p>The position of the right border line of the span on the y-axis.The default is <code>0</code>. Python methods:</p> Name Parameters Return Type get_xmax() - Float set_xmax() xMax : Float None"},{"location":"components/vspan/#closed-bool","title":"closed (Bool)","text":"<p>Wether the Polygon is closed. This usually results in the border line being open since no close vertice is created.The default is <code>True</code>. Python methods:</p> Name Parameters Return Type get_closed() - Bool set_closed() closed  : Bool None"}]}